{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inform\u00e1tica y sistemas operativos En esta p\u00e1gina se disponen los apuntes que se usar\u00e1n durante los cursos de: Sistemas Operativos en Red (SOR) de 2\u00ba de ciclo medio de inform\u00e1tica. TIC de bachillerato. Los apuntes se orientan m\u00e1s bien al m\u00f3dulo de ciclo medio, aunque las partes introductorias son muy \u00fatiles para ambos m\u00f3dulos. Estos apuntes se ir\u00e1n desarrollando a lo largo del curso y para incompletas tendr\u00e1n la etiqueta de TODO (para hacer). Estas partes se ir\u00e1n completando a lo largo del curso y complementar\u00e1n con enlaces en el aula virtual o p\u00e1ginas web que se dispondr\u00e1n en esta p\u00e1gina. Autor: Marcos N\u00fa\u00f1ez Celeiro","title":"Iniciaci\u00f3n"},{"location":"#informatica-y-sistemas-operativos","text":"En esta p\u00e1gina se disponen los apuntes que se usar\u00e1n durante los cursos de: Sistemas Operativos en Red (SOR) de 2\u00ba de ciclo medio de inform\u00e1tica. TIC de bachillerato. Los apuntes se orientan m\u00e1s bien al m\u00f3dulo de ciclo medio, aunque las partes introductorias son muy \u00fatiles para ambos m\u00f3dulos. Estos apuntes se ir\u00e1n desarrollando a lo largo del curso y para incompletas tendr\u00e1n la etiqueta de TODO (para hacer). Estas partes se ir\u00e1n completando a lo largo del curso y complementar\u00e1n con enlaces en el aula virtual o p\u00e1ginas web que se dispondr\u00e1n en esta p\u00e1gina. Autor: Marcos N\u00fa\u00f1ez Celeiro","title":"Inform\u00e1tica y sistemas operativos"},{"location":"1-intro/1-intro-informatica/","text":"Introducci\u00f3n a la inform\u00e1tica Hay muchas cosas que pueden abarcarse en una introducci\u00f3n a la inform\u00e1tica. En este caso, nos vamos a centrar en la privacidad de los navegadores, comprender tipos de ficheros que existen y sus extensiones. Cheatsheet de combinaciones de teclas Acci\u00f3n Combinaci\u00f3n Abrir pesta\u00f1a del navegador CONTROL + T Cerrar pesta\u00f1a del navegador CONTROL + W Cerrar ventana ALT + F4 Hacer captura de parte de la pantalla WINDOWS + SHIFT + S Cambiar entre ventanas ALT + TAB Ver escritorio WINDOWS + D Recargar p\u00e1gina web CONTROL + R o F5 Renombrar fichero o carpeta F2 Eliminar fichero SUPR Bloquear pantalla WINDOWS + L Ficheros y carpetas Crear una nueva carpeta en Windows 11 Para crear una nueva carpeta en Windows 11 se puede pulsar en el bot\u00f3n derecho en un sitio vac\u00edo y seleccionar \"Nueva carpeta\": Extensiones de ficheros Si nos fijamos en la imagen anterior, el fichero \"texto1\" es un fichero de texto. Los ficheros de texto suelen tener la extensi\u00f3n \".txt\". El nombre de ese fichero, por lo tanto, deber\u00eda ser \"texto1.txt\". Por seguridad (para que no cambiemos la extensi\u00f3n por error a los ficheros) Windows oculta la extensi\u00f3n. Algunas de las extensiones de ficheros m\u00e1s comunes son las siguientes: Nombre . Extensi\u00f3n Fichero de texto . txt imagen . jpg video . mp4 Documento . odt Documento . docx Ejecutable . exe Ejecutable instalable . msi Comprimido . zip Comprimido . rar En los sistemas operativos Windows , por defecto, las extensiones de fichero vienen deshabilitadas (por tanto, aunque est\u00e1n ah\u00ed, no se ven ). Para poder verlas debes, desde cualquier carpeta, hacer lo siguiente: Comprimir y descomprimir ficheros Los ficheros comprimidos suelen tener la extensi\u00f3n .zip o .rar (aunque existen otras: tar.gz, tgz, 7zip...). Para comprimir un fichero, solamente hay que pulsar bot\u00f3n derecho sobre los archivos que se desean comprimir y pulsar la opci\u00f3n deseada. Por ejemplo, si disponemos de la aplicaci\u00f3n 7zip: Bot\u00f3n derecho --> 7-Zip --> A\u00f1adir al archivo. Nos aparecer\u00e1 una nueva ventana. Le ponemos un nombre al fichero y elegimos extensi\u00f3n zip (es la m\u00e1s com\u00fan). Si en lugar de comprimir, queremos descomprimir, hacemos el mismo proceso seleccionando la opci\u00f3n de \"descomprimir\" o \"extraer\": Bot\u00f3n derecho -> 7-Zip -> Extraer aqu\u00ed (o \"extraer ficheros\" u otras opciones que digan \"extraer\"). Editores de texto y procesadores de texto Es importante diferenciar entre editores de texto y procesadores de texto. Mientras que un fichero editado con un editor de texto (p. ej: Bloc de Notas) solo contiene texto, uno editado con un procesador de texto contiene muchos metadatos: negritas, cursivas, m\u00e1rgenes, colores...). La extensi\u00f3n m\u00e1s t\u00edpica usada para almacenar ficheros en editores de texto es .txt mientras que en procesadores de texto son .odt y .docx . Navegadores web Los navegadores web m\u00e1s populares hoy en d\u00eda son: Mozilla Firefox. Google Chrome. Microsoft Edge. Opera. Todos estos navegadores funcionan muy bien hoy en d\u00eda. Nosotros utilizaremos Firefox de forma habitual ya que adem\u00e1s de funcionar muy bien es el \u00fanico de estos que es libre. Seguridad en internet Contrase\u00f1as Actualmente, las aplicaciones piden contrase\u00f1as normalmente complejas, \u00bfpor qu\u00e9? Bien, la raz\u00f3n es porque es m\u00e1s dif\u00edcil robarlas. Existen dos tipos de ataques: Ataque por fuerza bruta: un programa que prueba contrase\u00f1as por fuerza bruta basicamente intentar\u00eda todas las contrase\u00f1as posibles. Por ejemplo, desde la a hasta la z (may\u00fasculas y min\u00fasculas) desde 4 d\u00edgitos hasta 8. O solo num\u00e9ricas. Una contrase\u00f1a con muchos caracteres y que incluye algunos raros (* @ # & %...) es computacionalmente muy dif\u00edcil (practicamente imposible) de descifrar. Ataque por diccionarios: se prueban los usuarios y contrase\u00f1as m\u00e1s comunes. Por ejemplo: Usuario Contrase\u00f1a admin admin 1234 1234 admin 123456 ........ ........ NOTA : esto es solo un ejemplo de posibles combinaciones muy comunes. Si usas una de estas es m\u00e1s probable que alguien pueda descubrirla (incluso sin ning\u00fan tipo de aplicaci\u00f3n). Por ello, se obliga a escribir contrase\u00f1as seguras. En resumen, para evitar peligros con las contrase\u00f1as se recomienda cumplir ciertas normas de: complejidad de la misma (may\u00fasculas, min\u00fasculas, n\u00fameros y caracteres poco habituales), longitud (m\u00e1s de 8 caracteres) y cambiarla cada cierto tiempo. En empresas o p\u00e1ginas web se piden (en ocasiones) demasiados requisitos para las contrase\u00f1as, lo cu\u00e1l puede resultar problem\u00e1tico. Por ejemplo, imagina que (aparte de los anteriores requisitos) te pidan que la cambies cada 6 meses y que cada vez sea diferente (no puedes repetir las antiguas). Adem\u00e1s de esto, debes tener contrase\u00f1as diferentes para varios servicios. Estos requisitos resultan contraproducentes en muchas ocasiones, ya que implican que las contrase\u00f1as se pierdan o se apunten en papeles sobre la mesa, terminen en papeleras... lo cu\u00e1l las hace realmente m\u00e1s vulnerables a ser descubiertas. Navegadores web Hay algunos conceptos a tener en cuenta respectoa los navegadores web: Historial : cuando navegas por internet queda almacenada tanto la fecha como la hora en que has accedido a cada p\u00e1gina. La lista de p\u00e1ginas a las que accedes se llama \"historial\" y, si alguien accede a tu ordenador, puede descubrir informaci\u00f3n sobre ti. Todos los navegadores tienen opci\u00f3n de borrar el historial de navegaci\u00f3n. Modo inc\u00f3gnito o privado : los navegadores tienen un modo privado (o inc\u00f3gnito). En este modo el historial de navegaci\u00f3n no se guarda en el historial de navegaci\u00f3n (por tanto, todo lo que haces en el modo inc\u00f3gnito es m\u00e1s privado ya que no queda almacenado). Cookies : las cookies son peque\u00f1as l\u00edneas de informaci\u00f3n que una p\u00e1gina (cuando entras) guarda sobre ti. De esta manera, si vuelves a entrar en ella sabe que eres la misma persona que lo ha hecho anteriormente. Una cookie puede consistir en tu login con usuario y contrase\u00f1a que, una vez hecho, queda almacenado durante un tiempo (por eso no tienes que volver a identificarte/logearte cada vez que entras a la web). Las cookies tambi\u00e9n pueden ser eliminadas y hacerlo ayuda a mitigar riesgos de privacidad y seguridad. Contrase\u00f1as : los navegadores web m\u00e1s comunes permiten almacenar contrase\u00f1as (p. ej: en Mozilla Firefox tienen un sistema llamado Firefox Sync, en Google Chrome ir\u00edan asociadas a tu cuenta de Google/Gmail). Almacenar contrase\u00f1as hace que estas est\u00e9n en la nube y no las pierdas (con los riesgos de se almacenan en un sitio externo). Existen malwares denominados keyloggers , estos guardan todo lo que escribes en el ordenador (lo cu\u00e1l es una manera efectiva de robar usuarios y contrase\u00f1as). Estos gestores de contrase\u00f1as te protegen ante eso, ya que no tienes que escribirlas. Malware El malware o software maliciosoque se instala sin que el usuario lo sepa. Existen m\u00faltiples tipos, algunos son los siguientes: Spam El spam se refiere a correos masivos con publicidad que te instan a entrar en distintas p\u00e1ginas web. En el correo electr\u00f3nico, por ejemplo, suele haber una pesta\u00f1a dedicada a correos de spam. Pishing El Phishing se refiere a p\u00e1ginas web falsas que suplantan a las verdaderas para que el usuario desprevenido introduzca informaci\u00f3n sensible (es com\u00fan el phishing bancario). Puede ser un mensaje que indique que te ha tocado la loter\u00eda y entres al enlace e introduzcas tus datos para cobrar el dinero. Otro ejemplo es un correo que te avise de que debes cambiar tus credenciales en Instagram por una brecha de seguridad (y en lugar de llevarte a la p\u00e1gina de instagram te dejan un enlace a una p\u00e1gina clon www.instagrram.com, por ejemplo). Si metes ah\u00ed tus credenciales reales se las estar\u00edas dando a otra persona desconocida. Troyano Malware escondido dentro de un software aparentemente bueno. Una vez lo ejecutas hacen su tarea maliciosa o se instalan sin m\u00e1s para actuar pasado cierto tiempo. Keylogger Es un tipo de malware que guarda todas tus pulsaciones de teclado (y con esto pueden obtener cualquier cosa que escribas, desde contrase\u00f1as hasta otra informaci\u00f3n personal). Los navegadores web tienen autocompletado de formularios (p. ej: al registrarte en una p\u00e1gina) para que un keylogger que se pueda tener no los detecte. Tambi\u00e9n, almacenar contrase\u00f1as con un sistema como LastPass , de pago, o BitWarden , gratuito ayuda a protegerse contra este malware. Los navegadores web tambi\u00e9n almacenan contrase\u00f1as, aunque se consideran m\u00e1s inseguros que los servicios anteriores. Spyware El spyware intenta solo recopilar informaci\u00f3n del usuario (actividad variada, historial de navegaci\u00f3n web, etc.) para venderla posteriormente. Ramsonware Este es el que m\u00e1s sale en el cine, realmente se ve muy bien que hace con algunas escenas de series o pel\u00edculas: Aunque la escena presentada en el v\u00eddeo anterior es ficci\u00f3n, el ramsonware en s\u00ed es real y ah\u00ed se puede ver bastante bien lo que hace. Este es probablemente el malware m\u00e1s peligroso que existe. La palabra Ramson significa \u201crescate\u201d. Suelen infectar equipos a trav\u00e9s de puertas traseras o troyanos y, una vez dentro, encriptan todos los ficheros que pueden contener informaci\u00f3n \u00fatil que est\u00e9n a su alcance (dentro del propio equipo o a trav\u00e9s de la red) lo que los hace muy peligrosos. Algunos famosos son CryptoLocker o WannaCry. La \u00fanica opci\u00f3n de recuperarse de un ataque de Ramsonware es restaurar los datos de una copia de seguridad (previa desinfecci\u00f3n). Nunca se debe pagar el rescate por dos motivos: Fomenta que el delincuente contin\u00fae usando este m\u00e9todo para extorsionar a otras personas. Nadie puede asegurar que, tras el pago, se vaya a obtener el software y la contrase\u00f1a de descifrado. Algunos enlaces interesantes para informarse m\u00e1s sobre este tema: Ataque a Telef\u00f3nica en 2017 . Experiencia de una persona en empresa con un ataque de Ramsonware (Xataka) Imagen de ordenador infectado con el ramsonware WannaCry Miner\u00eda El malware de miner\u00eda de monedas utiliza sistemas para crear criptomonedas (lo que se conoce como \u201cminar\u201d) sin consentimiento ni conocimiento de las v\u00edctimas. Este tipo de malware ha empezado a funcionar hace pocos a\u00f1os con el auge de las criptomonedas y se ha disparado (seg\u00fan McAfee Labs) desde 2018. Solo en ese a\u00f1o se crearon 5 millones de nuevos malwares de miner\u00eda. Protecci\u00f3n ante amenazas y privacidad A nivel usuario, puedes protegerte de diversas formas: Mantener el sistema operativo y el antivirus actualizado. No entrar a cambiar la contrase\u00f1a desde ning\u00fan email que te hayan enviado (puede ser falso). Tampoco conf\u00edes en los mensajes de m\u00f3vil. No tengas la misma contrase\u00f1a siempre. En caso de aplicaciones m\u00f3viles, no instalar aplicaciones de fuentes desconocidas (solamente desde la Play Store). Por defecto, en Android, las aplicaciones de terceros no se pueden instalar a no ser que se active explicitamente la opci\u00f3n \"Permitir or\u00edgenes desconocidos\". Introduce tu correo en https://haveibeenpwned.com/ y comprueba que las contrase\u00f1as del mismo no han sido vulneradas. En esa p\u00e1gina web se almacena informaci\u00f3n sobre filtraciones de seguridad en distintas plataformas y te indican si puedes tener problemas con la tuya. Puedes almacenar las contrase\u00f1as en alg\u00fan gestor (LastPass, Bitwarden...). Aunque estar\u00edan almacenadas en un servidor externo (esto ya de por s\u00ed es un peligroso) ser\u00edas menos vulnerable a otros malwares como Keyloggers y podr\u00e1s tener varias diferentes sin perderlas. Suele ser un poco m\u00e1s seguro que almacenarlas en el navegador. Si usas cuenta de Google revisa bien en ella si hay problemas de seguridad. Si almacenas ah\u00ed contrase\u00f1as te avisar\u00e1 si hay algunas expuestas a filtraciones. Si usas un ordenador externo, utiliza navegaci\u00f3n privada. Ten cuidado con la navegaci\u00f3n sobre redes Wifi abiertas (la informaci\u00f3n no va encriptada y puede capturarse con alg\u00fan sniffer de tr\u00e1fico, p. ej: Wireshark . Vigila que la navegaci\u00f3n sea HTTPS (y no HTTP). La informaci\u00f3n que se pasa por HTTPS va encriptada . Si te preocupa mucho la seguridad puedes probar otras opciones de navegador web, como por ejemplo: Brave . Cuidado con almacenar contrase\u00f1as en papel y dejarlas en cualquier sitio. Guardalas de forma segura y r\u00f3mpleas si las tiras. Borra el historial y cookies de forma peri\u00f3dica. Referencias Kat Aoki. How to Increase Web Browser Security. Lifewire. Obtenido de: https://www.lifewire.com/increase-web-browser-security-4767673","title":"Introducci\u00f3n a la inform\u00e1tica"},{"location":"1-intro/1-intro-informatica/#introduccion-a-la-informatica","text":"Hay muchas cosas que pueden abarcarse en una introducci\u00f3n a la inform\u00e1tica. En este caso, nos vamos a centrar en la privacidad de los navegadores, comprender tipos de ficheros que existen y sus extensiones.","title":"Introducci\u00f3n a la inform\u00e1tica"},{"location":"1-intro/1-intro-informatica/#cheatsheet-de-combinaciones-de-teclas","text":"Acci\u00f3n Combinaci\u00f3n Abrir pesta\u00f1a del navegador CONTROL + T Cerrar pesta\u00f1a del navegador CONTROL + W Cerrar ventana ALT + F4 Hacer captura de parte de la pantalla WINDOWS + SHIFT + S Cambiar entre ventanas ALT + TAB Ver escritorio WINDOWS + D Recargar p\u00e1gina web CONTROL + R o F5 Renombrar fichero o carpeta F2 Eliminar fichero SUPR Bloquear pantalla WINDOWS + L","title":"Cheatsheet de combinaciones de teclas"},{"location":"1-intro/1-intro-informatica/#ficheros-y-carpetas","text":"","title":"Ficheros y carpetas"},{"location":"1-intro/1-intro-informatica/#crear-una-nueva-carpeta-en-windows-11","text":"Para crear una nueva carpeta en Windows 11 se puede pulsar en el bot\u00f3n derecho en un sitio vac\u00edo y seleccionar \"Nueva carpeta\":","title":"Crear una nueva carpeta en Windows 11"},{"location":"1-intro/1-intro-informatica/#extensiones-de-ficheros","text":"Si nos fijamos en la imagen anterior, el fichero \"texto1\" es un fichero de texto. Los ficheros de texto suelen tener la extensi\u00f3n \".txt\". El nombre de ese fichero, por lo tanto, deber\u00eda ser \"texto1.txt\". Por seguridad (para que no cambiemos la extensi\u00f3n por error a los ficheros) Windows oculta la extensi\u00f3n. Algunas de las extensiones de ficheros m\u00e1s comunes son las siguientes: Nombre . Extensi\u00f3n Fichero de texto . txt imagen . jpg video . mp4 Documento . odt Documento . docx Ejecutable . exe Ejecutable instalable . msi Comprimido . zip Comprimido . rar En los sistemas operativos Windows , por defecto, las extensiones de fichero vienen deshabilitadas (por tanto, aunque est\u00e1n ah\u00ed, no se ven ). Para poder verlas debes, desde cualquier carpeta, hacer lo siguiente:","title":"Extensiones de ficheros"},{"location":"1-intro/1-intro-informatica/#comprimir-y-descomprimir-ficheros","text":"Los ficheros comprimidos suelen tener la extensi\u00f3n .zip o .rar (aunque existen otras: tar.gz, tgz, 7zip...). Para comprimir un fichero, solamente hay que pulsar bot\u00f3n derecho sobre los archivos que se desean comprimir y pulsar la opci\u00f3n deseada. Por ejemplo, si disponemos de la aplicaci\u00f3n 7zip: Bot\u00f3n derecho --> 7-Zip --> A\u00f1adir al archivo. Nos aparecer\u00e1 una nueva ventana. Le ponemos un nombre al fichero y elegimos extensi\u00f3n zip (es la m\u00e1s com\u00fan). Si en lugar de comprimir, queremos descomprimir, hacemos el mismo proceso seleccionando la opci\u00f3n de \"descomprimir\" o \"extraer\": Bot\u00f3n derecho -> 7-Zip -> Extraer aqu\u00ed (o \"extraer ficheros\" u otras opciones que digan \"extraer\").","title":"Comprimir y descomprimir ficheros"},{"location":"1-intro/1-intro-informatica/#editores-de-texto-y-procesadores-de-texto","text":"Es importante diferenciar entre editores de texto y procesadores de texto. Mientras que un fichero editado con un editor de texto (p. ej: Bloc de Notas) solo contiene texto, uno editado con un procesador de texto contiene muchos metadatos: negritas, cursivas, m\u00e1rgenes, colores...). La extensi\u00f3n m\u00e1s t\u00edpica usada para almacenar ficheros en editores de texto es .txt mientras que en procesadores de texto son .odt y .docx .","title":"Editores de texto y procesadores de texto"},{"location":"1-intro/1-intro-informatica/#navegadores-web","text":"Los navegadores web m\u00e1s populares hoy en d\u00eda son: Mozilla Firefox. Google Chrome. Microsoft Edge. Opera. Todos estos navegadores funcionan muy bien hoy en d\u00eda. Nosotros utilizaremos Firefox de forma habitual ya que adem\u00e1s de funcionar muy bien es el \u00fanico de estos que es libre.","title":"Navegadores web"},{"location":"1-intro/1-intro-informatica/#seguridad-en-internet","text":"","title":"Seguridad en internet"},{"location":"1-intro/1-intro-informatica/#contrasenas","text":"Actualmente, las aplicaciones piden contrase\u00f1as normalmente complejas, \u00bfpor qu\u00e9? Bien, la raz\u00f3n es porque es m\u00e1s dif\u00edcil robarlas. Existen dos tipos de ataques: Ataque por fuerza bruta: un programa que prueba contrase\u00f1as por fuerza bruta basicamente intentar\u00eda todas las contrase\u00f1as posibles. Por ejemplo, desde la a hasta la z (may\u00fasculas y min\u00fasculas) desde 4 d\u00edgitos hasta 8. O solo num\u00e9ricas. Una contrase\u00f1a con muchos caracteres y que incluye algunos raros (* @ # & %...) es computacionalmente muy dif\u00edcil (practicamente imposible) de descifrar. Ataque por diccionarios: se prueban los usuarios y contrase\u00f1as m\u00e1s comunes. Por ejemplo: Usuario Contrase\u00f1a admin admin 1234 1234 admin 123456 ........ ........ NOTA : esto es solo un ejemplo de posibles combinaciones muy comunes. Si usas una de estas es m\u00e1s probable que alguien pueda descubrirla (incluso sin ning\u00fan tipo de aplicaci\u00f3n). Por ello, se obliga a escribir contrase\u00f1as seguras. En resumen, para evitar peligros con las contrase\u00f1as se recomienda cumplir ciertas normas de: complejidad de la misma (may\u00fasculas, min\u00fasculas, n\u00fameros y caracteres poco habituales), longitud (m\u00e1s de 8 caracteres) y cambiarla cada cierto tiempo. En empresas o p\u00e1ginas web se piden (en ocasiones) demasiados requisitos para las contrase\u00f1as, lo cu\u00e1l puede resultar problem\u00e1tico. Por ejemplo, imagina que (aparte de los anteriores requisitos) te pidan que la cambies cada 6 meses y que cada vez sea diferente (no puedes repetir las antiguas). Adem\u00e1s de esto, debes tener contrase\u00f1as diferentes para varios servicios. Estos requisitos resultan contraproducentes en muchas ocasiones, ya que implican que las contrase\u00f1as se pierdan o se apunten en papeles sobre la mesa, terminen en papeleras... lo cu\u00e1l las hace realmente m\u00e1s vulnerables a ser descubiertas.","title":"Contrase\u00f1as"},{"location":"1-intro/1-intro-informatica/#navegadores-web_1","text":"Hay algunos conceptos a tener en cuenta respectoa los navegadores web: Historial : cuando navegas por internet queda almacenada tanto la fecha como la hora en que has accedido a cada p\u00e1gina. La lista de p\u00e1ginas a las que accedes se llama \"historial\" y, si alguien accede a tu ordenador, puede descubrir informaci\u00f3n sobre ti. Todos los navegadores tienen opci\u00f3n de borrar el historial de navegaci\u00f3n. Modo inc\u00f3gnito o privado : los navegadores tienen un modo privado (o inc\u00f3gnito). En este modo el historial de navegaci\u00f3n no se guarda en el historial de navegaci\u00f3n (por tanto, todo lo que haces en el modo inc\u00f3gnito es m\u00e1s privado ya que no queda almacenado). Cookies : las cookies son peque\u00f1as l\u00edneas de informaci\u00f3n que una p\u00e1gina (cuando entras) guarda sobre ti. De esta manera, si vuelves a entrar en ella sabe que eres la misma persona que lo ha hecho anteriormente. Una cookie puede consistir en tu login con usuario y contrase\u00f1a que, una vez hecho, queda almacenado durante un tiempo (por eso no tienes que volver a identificarte/logearte cada vez que entras a la web). Las cookies tambi\u00e9n pueden ser eliminadas y hacerlo ayuda a mitigar riesgos de privacidad y seguridad. Contrase\u00f1as : los navegadores web m\u00e1s comunes permiten almacenar contrase\u00f1as (p. ej: en Mozilla Firefox tienen un sistema llamado Firefox Sync, en Google Chrome ir\u00edan asociadas a tu cuenta de Google/Gmail). Almacenar contrase\u00f1as hace que estas est\u00e9n en la nube y no las pierdas (con los riesgos de se almacenan en un sitio externo). Existen malwares denominados keyloggers , estos guardan todo lo que escribes en el ordenador (lo cu\u00e1l es una manera efectiva de robar usuarios y contrase\u00f1as). Estos gestores de contrase\u00f1as te protegen ante eso, ya que no tienes que escribirlas.","title":"Navegadores web"},{"location":"1-intro/1-intro-informatica/#malware","text":"El malware o software maliciosoque se instala sin que el usuario lo sepa. Existen m\u00faltiples tipos, algunos son los siguientes:","title":"Malware"},{"location":"1-intro/1-intro-informatica/#spam","text":"El spam se refiere a correos masivos con publicidad que te instan a entrar en distintas p\u00e1ginas web. En el correo electr\u00f3nico, por ejemplo, suele haber una pesta\u00f1a dedicada a correos de spam.","title":"Spam"},{"location":"1-intro/1-intro-informatica/#pishing","text":"El Phishing se refiere a p\u00e1ginas web falsas que suplantan a las verdaderas para que el usuario desprevenido introduzca informaci\u00f3n sensible (es com\u00fan el phishing bancario). Puede ser un mensaje que indique que te ha tocado la loter\u00eda y entres al enlace e introduzcas tus datos para cobrar el dinero. Otro ejemplo es un correo que te avise de que debes cambiar tus credenciales en Instagram por una brecha de seguridad (y en lugar de llevarte a la p\u00e1gina de instagram te dejan un enlace a una p\u00e1gina clon www.instagrram.com, por ejemplo). Si metes ah\u00ed tus credenciales reales se las estar\u00edas dando a otra persona desconocida.","title":"Pishing"},{"location":"1-intro/1-intro-informatica/#troyano","text":"Malware escondido dentro de un software aparentemente bueno. Una vez lo ejecutas hacen su tarea maliciosa o se instalan sin m\u00e1s para actuar pasado cierto tiempo.","title":"Troyano"},{"location":"1-intro/1-intro-informatica/#keylogger","text":"Es un tipo de malware que guarda todas tus pulsaciones de teclado (y con esto pueden obtener cualquier cosa que escribas, desde contrase\u00f1as hasta otra informaci\u00f3n personal). Los navegadores web tienen autocompletado de formularios (p. ej: al registrarte en una p\u00e1gina) para que un keylogger que se pueda tener no los detecte. Tambi\u00e9n, almacenar contrase\u00f1as con un sistema como LastPass , de pago, o BitWarden , gratuito ayuda a protegerse contra este malware. Los navegadores web tambi\u00e9n almacenan contrase\u00f1as, aunque se consideran m\u00e1s inseguros que los servicios anteriores.","title":"Keylogger"},{"location":"1-intro/1-intro-informatica/#spyware","text":"El spyware intenta solo recopilar informaci\u00f3n del usuario (actividad variada, historial de navegaci\u00f3n web, etc.) para venderla posteriormente.","title":"Spyware"},{"location":"1-intro/1-intro-informatica/#ramsonware","text":"Este es el que m\u00e1s sale en el cine, realmente se ve muy bien que hace con algunas escenas de series o pel\u00edculas: Aunque la escena presentada en el v\u00eddeo anterior es ficci\u00f3n, el ramsonware en s\u00ed es real y ah\u00ed se puede ver bastante bien lo que hace. Este es probablemente el malware m\u00e1s peligroso que existe. La palabra Ramson significa \u201crescate\u201d. Suelen infectar equipos a trav\u00e9s de puertas traseras o troyanos y, una vez dentro, encriptan todos los ficheros que pueden contener informaci\u00f3n \u00fatil que est\u00e9n a su alcance (dentro del propio equipo o a trav\u00e9s de la red) lo que los hace muy peligrosos. Algunos famosos son CryptoLocker o WannaCry. La \u00fanica opci\u00f3n de recuperarse de un ataque de Ramsonware es restaurar los datos de una copia de seguridad (previa desinfecci\u00f3n). Nunca se debe pagar el rescate por dos motivos: Fomenta que el delincuente contin\u00fae usando este m\u00e9todo para extorsionar a otras personas. Nadie puede asegurar que, tras el pago, se vaya a obtener el software y la contrase\u00f1a de descifrado. Algunos enlaces interesantes para informarse m\u00e1s sobre este tema: Ataque a Telef\u00f3nica en 2017 . Experiencia de una persona en empresa con un ataque de Ramsonware (Xataka) Imagen de ordenador infectado con el ramsonware WannaCry","title":"Ramsonware"},{"location":"1-intro/1-intro-informatica/#mineria","text":"El malware de miner\u00eda de monedas utiliza sistemas para crear criptomonedas (lo que se conoce como \u201cminar\u201d) sin consentimiento ni conocimiento de las v\u00edctimas. Este tipo de malware ha empezado a funcionar hace pocos a\u00f1os con el auge de las criptomonedas y se ha disparado (seg\u00fan McAfee Labs) desde 2018. Solo en ese a\u00f1o se crearon 5 millones de nuevos malwares de miner\u00eda.","title":"Miner\u00eda"},{"location":"1-intro/1-intro-informatica/#proteccion-ante-amenazas-y-privacidad","text":"A nivel usuario, puedes protegerte de diversas formas: Mantener el sistema operativo y el antivirus actualizado. No entrar a cambiar la contrase\u00f1a desde ning\u00fan email que te hayan enviado (puede ser falso). Tampoco conf\u00edes en los mensajes de m\u00f3vil. No tengas la misma contrase\u00f1a siempre. En caso de aplicaciones m\u00f3viles, no instalar aplicaciones de fuentes desconocidas (solamente desde la Play Store). Por defecto, en Android, las aplicaciones de terceros no se pueden instalar a no ser que se active explicitamente la opci\u00f3n \"Permitir or\u00edgenes desconocidos\". Introduce tu correo en https://haveibeenpwned.com/ y comprueba que las contrase\u00f1as del mismo no han sido vulneradas. En esa p\u00e1gina web se almacena informaci\u00f3n sobre filtraciones de seguridad en distintas plataformas y te indican si puedes tener problemas con la tuya. Puedes almacenar las contrase\u00f1as en alg\u00fan gestor (LastPass, Bitwarden...). Aunque estar\u00edan almacenadas en un servidor externo (esto ya de por s\u00ed es un peligroso) ser\u00edas menos vulnerable a otros malwares como Keyloggers y podr\u00e1s tener varias diferentes sin perderlas. Suele ser un poco m\u00e1s seguro que almacenarlas en el navegador. Si usas cuenta de Google revisa bien en ella si hay problemas de seguridad. Si almacenas ah\u00ed contrase\u00f1as te avisar\u00e1 si hay algunas expuestas a filtraciones. Si usas un ordenador externo, utiliza navegaci\u00f3n privada. Ten cuidado con la navegaci\u00f3n sobre redes Wifi abiertas (la informaci\u00f3n no va encriptada y puede capturarse con alg\u00fan sniffer de tr\u00e1fico, p. ej: Wireshark . Vigila que la navegaci\u00f3n sea HTTPS (y no HTTP). La informaci\u00f3n que se pasa por HTTPS va encriptada . Si te preocupa mucho la seguridad puedes probar otras opciones de navegador web, como por ejemplo: Brave . Cuidado con almacenar contrase\u00f1as en papel y dejarlas en cualquier sitio. Guardalas de forma segura y r\u00f3mpleas si las tiras. Borra el historial y cookies de forma peri\u00f3dica.","title":"Protecci\u00f3n ante amenazas y privacidad"},{"location":"1-intro/1-intro-informatica/#referencias","text":"Kat Aoki. How to Increase Web Browser Security. Lifewire. Obtenido de: https://www.lifewire.com/increase-web-browser-security-4767673","title":"Referencias"},{"location":"1-intro/2-arquitecturas-fisicas/","text":"Introducci\u00f3n a la inform\u00e1tica y los sistemas operativos Componentes f\u00edsicos de los ordenadores Esta documentaci\u00f3n se encuentra aqu\u00ed . Puedes consultar informaci\u00f3n adicional sobre los componentes f\u00edsicos en este art\u00edculo . Arquitectura Arquitecturas iniciales Von Neumann y Harvard. Harvard modificado. Arquitecturas actuales Arquitecturas actuales: x86, x64, ARM. Arquitectura x86 (32 bits) La arquitectura x86 es probablemente la m\u00e1s utilizada de la historia en ordenadores. Se ha creado en los a\u00f1os 70. El primer microprocesador se ha lanzado en 1971 por Intel. A\u00f1os m\u00e1s tarde, en 1978 Intel lanza el procesador Intel 8086 , primer procesador con juego de instrucciones x86 y que usaba una arquitectura de 16 bits. Su nombre se utiliz\u00f3 para nombrar los pr\u00f3ximos procesadores de Intel: 80186, 80286, 80386, 80486, etc. Aunque x86 era inicialmente de 16bits, las versiones m\u00e1s actuales y que conocemos en ordenadores las \u00faltimas d\u00e9cadas son de 32 bits. Los ordenadores con arquitectura x86 cesaron su producci\u00f3n en 2007. Arquitectura AMD64 (64 bits) La arquitectura x86 era de Intel y utilizaba instrucciones de 32 bits desde 1985. La arquitectura m\u00e1s usada actualmente en ordenadores personales es AMD64 (de 64 bits). En el a\u00f1o 2003 el mercado de procesadores se divid\u00eda entre dos marcas que compet\u00edan entre s\u00ed: AMD e Intel (algo que sigue ocurriendo a d\u00eda de hoy). AMD se les adelanta en el mercado en esta \u00e9poca sacando procesadores con una nueva arquitectura con un juego de instrucciones x86_64 que no solo era de 64 bits, sino que inclu\u00eda tambi\u00e9n en ella el juego de instrucciones completo de x86 tanto para 16 bits como para 32, permitiendo as\u00ed instalar programas de todo tipo. Consulta este enlace para m\u00e1s informaci\u00f3n sobre el tema. ARM La arquitectura ARM (Advanced RISC Machines) es la m\u00e1s utilizada en dispositivos m\u00f3viles, teniendo un bajo consumo de energ\u00eda. Aunque a d\u00eda de hoy practicamente todos los ordenadores que compramos son x64, est\u00e1n empezando a fabricarse ordenadores con arquitectura ARM. Como ejemplo, Apple ha empezado hace muy poco tiempo a usar procesadores con arquitectura ARM para sus port\u00e1tiles. No es posible instalar software para arquitecturas de 64 bits en ordenadores que usan ARM (por lo cu\u00e1l la decisi\u00f3n de Apple no es tomada a la ligera). Muchos dispositivos hoy en d\u00eda dependen de bater\u00edas, pero la tecnolog\u00eda de mejora de bater\u00edas apenas ha mejorado en toda una d\u00e9cada y esto hace que se busque mejorar el tiempo de uso en bater\u00eda de otras maneras, y esta arquitectura es buena para ello. Pr\u00e1ctica Para redactar la pr\u00e1ctica entrega capturas con todos los ejercicios. Busca el modelo de procesador y la RAM de la que dispone tu ordenador, as\u00ed como su arquitectura. Si dispones de este ordenador y quieres instalar en el el programa VirtualBox . Indica por qu\u00e9 no puedes instalar la \u00faltima versi\u00f3n y cu\u00e1l ser\u00eda la \u00faltima v\u00e1lida (lo dif\u00edcil aqu\u00ed es pensar por qu\u00e9 la \u00faltima versi\u00f3n no vale, despu\u00e9s busca la \u00faltima compatible con ese ordenador). Referencias Diferencias entre i386, x86, x64, AMD64 e IA64. Thinkinvirtual. Obtenido de: https://www.thinkinvirtual.com/2017/03/diferencias-entre-i386-x86-x64-amd64-e.html Jos\u00e9 Mar\u00eda L\u00f3pez. La guerra de los procesadores: CISC versus RISC (o x86 contra ARM). Hipertextual. Obtenido de: https://hipertextual.com/2021/09/procesadores-risc-cisc-arm","title":"Arquitecturas f\u00edsicas"},{"location":"1-intro/2-arquitecturas-fisicas/#introduccion-a-la-informatica-y-los-sistemas-operativos","text":"","title":"Introducci\u00f3n a la inform\u00e1tica y los sistemas operativos"},{"location":"1-intro/2-arquitecturas-fisicas/#componentes-fisicos-de-los-ordenadores","text":"Esta documentaci\u00f3n se encuentra aqu\u00ed . Puedes consultar informaci\u00f3n adicional sobre los componentes f\u00edsicos en este art\u00edculo .","title":"Componentes f\u00edsicos de los ordenadores"},{"location":"1-intro/2-arquitecturas-fisicas/#arquitectura","text":"","title":"Arquitectura"},{"location":"1-intro/2-arquitecturas-fisicas/#arquitecturas-iniciales","text":"Von Neumann y Harvard. Harvard modificado.","title":"Arquitecturas iniciales"},{"location":"1-intro/2-arquitecturas-fisicas/#arquitecturas-actuales","text":"Arquitecturas actuales: x86, x64, ARM.","title":"Arquitecturas actuales"},{"location":"1-intro/2-arquitecturas-fisicas/#arquitectura-x86-32-bits","text":"La arquitectura x86 es probablemente la m\u00e1s utilizada de la historia en ordenadores. Se ha creado en los a\u00f1os 70. El primer microprocesador se ha lanzado en 1971 por Intel. A\u00f1os m\u00e1s tarde, en 1978 Intel lanza el procesador Intel 8086 , primer procesador con juego de instrucciones x86 y que usaba una arquitectura de 16 bits. Su nombre se utiliz\u00f3 para nombrar los pr\u00f3ximos procesadores de Intel: 80186, 80286, 80386, 80486, etc. Aunque x86 era inicialmente de 16bits, las versiones m\u00e1s actuales y que conocemos en ordenadores las \u00faltimas d\u00e9cadas son de 32 bits. Los ordenadores con arquitectura x86 cesaron su producci\u00f3n en 2007.","title":"Arquitectura x86 (32 bits)"},{"location":"1-intro/2-arquitecturas-fisicas/#arquitectura-amd64-64-bits","text":"La arquitectura x86 era de Intel y utilizaba instrucciones de 32 bits desde 1985. La arquitectura m\u00e1s usada actualmente en ordenadores personales es AMD64 (de 64 bits). En el a\u00f1o 2003 el mercado de procesadores se divid\u00eda entre dos marcas que compet\u00edan entre s\u00ed: AMD e Intel (algo que sigue ocurriendo a d\u00eda de hoy). AMD se les adelanta en el mercado en esta \u00e9poca sacando procesadores con una nueva arquitectura con un juego de instrucciones x86_64 que no solo era de 64 bits, sino que inclu\u00eda tambi\u00e9n en ella el juego de instrucciones completo de x86 tanto para 16 bits como para 32, permitiendo as\u00ed instalar programas de todo tipo. Consulta este enlace para m\u00e1s informaci\u00f3n sobre el tema.","title":"Arquitectura AMD64 (64 bits)"},{"location":"1-intro/2-arquitecturas-fisicas/#arm","text":"La arquitectura ARM (Advanced RISC Machines) es la m\u00e1s utilizada en dispositivos m\u00f3viles, teniendo un bajo consumo de energ\u00eda. Aunque a d\u00eda de hoy practicamente todos los ordenadores que compramos son x64, est\u00e1n empezando a fabricarse ordenadores con arquitectura ARM. Como ejemplo, Apple ha empezado hace muy poco tiempo a usar procesadores con arquitectura ARM para sus port\u00e1tiles. No es posible instalar software para arquitecturas de 64 bits en ordenadores que usan ARM (por lo cu\u00e1l la decisi\u00f3n de Apple no es tomada a la ligera). Muchos dispositivos hoy en d\u00eda dependen de bater\u00edas, pero la tecnolog\u00eda de mejora de bater\u00edas apenas ha mejorado en toda una d\u00e9cada y esto hace que se busque mejorar el tiempo de uso en bater\u00eda de otras maneras, y esta arquitectura es buena para ello.","title":"ARM"},{"location":"1-intro/2-arquitecturas-fisicas/#practica","text":"Para redactar la pr\u00e1ctica entrega capturas con todos los ejercicios. Busca el modelo de procesador y la RAM de la que dispone tu ordenador, as\u00ed como su arquitectura. Si dispones de este ordenador y quieres instalar en el el programa VirtualBox . Indica por qu\u00e9 no puedes instalar la \u00faltima versi\u00f3n y cu\u00e1l ser\u00eda la \u00faltima v\u00e1lida (lo dif\u00edcil aqu\u00ed es pensar por qu\u00e9 la \u00faltima versi\u00f3n no vale, despu\u00e9s busca la \u00faltima compatible con ese ordenador).","title":"Pr\u00e1ctica"},{"location":"1-intro/2-arquitecturas-fisicas/#referencias","text":"Diferencias entre i386, x86, x64, AMD64 e IA64. Thinkinvirtual. Obtenido de: https://www.thinkinvirtual.com/2017/03/diferencias-entre-i386-x86-x64-amd64-e.html Jos\u00e9 Mar\u00eda L\u00f3pez. La guerra de los procesadores: CISC versus RISC (o x86 contra ARM). Hipertextual. Obtenido de: https://hipertextual.com/2021/09/procesadores-risc-cisc-arm","title":"Referencias"},{"location":"1-intro/3-intro-sos/","text":"Sistemas operativos Sistemas operativos de prop\u00f3sito general : o de uso general, el que utilizan las personas en su casa. Sistemas operativos en modo servidor : orientados a dar servicios a otras personas. P. ej: alojar webs a las que se accede desde navegadores web. Sistemas operativos de prop\u00f3sito general Podemos ordenar los sistemas operativos mas habituales actualmente en tres grupos: Windows MacOS GNU/Linux Sistemas Windows Tienen alrededor del 80% de la cuota de mercado en 2022. Los sistemas operativos de Microsoft nacen en 1981 con MS-DOS (el cu\u00e1l solo funciona por un terminal de texto, no tiene ventanas todav\u00eda). Para hacerlo m\u00e1s accesible para el p\u00fablico general las ventanas (la primera interfaz gr\u00e1fica de usuario o GUI) nace con Windows 1.0 en 1985. V\u00eddeo (Historia de Windows en 3 minutos) MacOS MacOS (antes llamado OS X) es la l\u00ednea de sistemas operativos creada por Apple para sus ordenadores (igual que lo es la marca Windows para Microsoft). La primera versi\u00f3n tiene fecha de 1984 y fue el primer ordenador personal que inclu\u00eda una GUI (interfaz gr\u00e1fica de usuario). Apple tiene un modelo de negocio basado en la exclusividad y la diferenciaci\u00f3n con la competencia. Al contrario que Microsoft, Apple hace tanto el hardware como el software de sus productos. GNU/Linux GNU/Linux es la base de muchos sistemas operativos de c\u00f3digo abierto. GNU/Linux no es un sistema operativo completo, sino una serie de programas y herramientas con un n\u00facleo ( kernel ) que comparten muchos sistemas operativos (OpenSuse, Ubuntu, Linux Mint, Debian, etc.). Los nombres m\u00e1s importantes detr\u00e1s de GNU/Linux son Richard Stallman y Linus Torvalds . Distribuciones GNU/Linux y entornos de escritorio Existen m\u00faltiples distribuciones basadas en Linux con diferentes caracter\u00edsticas (Debian, OpenSuse, Ubuntu, Linux Mint, Zorin OS, Fedora, Archilinux, etc.). Adem\u00e1s, cada una de estas distribuciones se puede usar con diferentes entornos de escritorio (puedes imaginarte unos m\u00e1s parecidos al estilo de Windows, otros m\u00e1s parecidos a MacOS y otros diferentes a ambos). Las distribuciones GNU/Linux m\u00e1s habituales y m\u00e1s \u201cbeginner friendly\u201d son las basadas en Ubuntu. Las versiones m\u00e1s habituales de Ubuntu son las siguientes: Ubuntu con entorno de escritorio \u201cGnome\u201d (denominado como Ubuntu ) . Ubuntu con entorno de escritorio \u201cKDE\u201d (denominado como Kubuntu ). Para ordenadores antiguos o con muy pocos recursos: Ubuntu con entorno de escritorio \u201cXFCE\u201d ( Xubuntu ). Ubuntu con entorno de escritorio \u201cLXDE\u201d ( Lubuntu ). A continuaci\u00f3n se muestran im\u00e1genes de distintos sistemas operativos y entornos de escritorio: Ubuntu con GNOME (Ubuntu) Ubuntu con KDE (Kubuntu) Ubuntu con LXDE (Lubuntu) Linux Mint (distribuci\u00f3n basada en Ubuntu) con entorno de escritorio Cinnamon Linux Mint con entorno de escritorio denominado MATE Zorin OS (distribuci\u00f3n basada en Ubuntu y Windows friendly ). Tiene un entorno de escritorio GNOME adaptado por ellos mismos para hacerlo m\u00e1s familiar a Windows. Como veis, es posible tener el mismo sistema operativo con diferente entorno de escritorio . GNOME, KDE, XFCE, Cinnamon, MATE o LXDE son entornos de escritorio diferentes. Iniciarse en GNU/Linux : si quieres iniciarte en GNU/Linux en uso personal usar Ubuntu o una distribuci\u00f3n basada en Ubuntu es la mejor opci\u00f3n. Mis recomendaciones para empezar: Ubuntu (el normal con Gnome), Linux Mint (Cinnamon) o Zorin OS. Algunos sistemas operativos o entornos de escritorio en GNU/Linux consumen muy pocos y est\u00e1n preparados para dar una segunda vida a ordenadores antiguos. Si quieres dar una segunda vida a un ordenador antiguo sigue este enlace . Sistemas operativos en servidor Windows en servidores Para servidores, Microsoft dispone de versiones denominadas Windows Server (p. ej: Windows Server 2012 o Windows Server 2022, la m\u00e1s reciente). Descarga Para descargar cualquier sistema operativo de Microsoft en versi\u00f3n de prueba se puede acceder al centro de evaluaci\u00f3n de microsoft y posteriormente seleccionar el sistema operativo deseado. Versiones En WS 2019 tenemos lo siguiente, de m\u00e1s barato a m\u00e1s caro: Windows Server 2019 Essential . Destinado a peque\u00f1os negocios y con un m\u00e1ximo de 25 usuarios pueden conectarse a el y 50 dispositivos. Actualmente Microsoft recomienda no usar esta versi\u00f3n y utilizar, en su lugar, su soluci\u00f3n de servidores en la nube Microsoft 365. Windows Server 2019 Standard : bueno para entornos f\u00edsicos (que no usan m\u00e1quinas o casi no usan m\u00e1quinas virtuales). Viene solamente con dos licencias virtuales (es decir, podemos instalar WS2019 Standard con dos VMs en HyperV pero no incrementar a una tercera a no ser que la compremos). Adem\u00e1s, si usamos el servidor f\u00edsico para cualquier otra cosa que no sea esas dos m\u00e1quinas virtuales entonces consumir\u00e1 una de esas licencias. Windows Server 2019 Datacenter : viene con licencias ilimitadas para ejecutar m\u00e1quinas virtuales (esto es, puedes crear tantas VMs como quieras). Hyper-V server 2019 : servidor dedicado de m\u00e1quinas virtuales con Hyper-V. Se puede descargar de la web de Microsoft con infinitas m\u00e1quinas virtuales. Viene sin GUI y no podemos hacer otra cosa que albergar en el m\u00e1quinas virtuales. Las diferencias m\u00e1s grandes que hay entre las versiones Standard y Datacenter es el n\u00famero de licencias para virtualizaci\u00f3n. GNU/Linux en servidores Algunos usuarios habituales de Linux son los siguientes: Gobierno de los Estados Unidos y algunas de sus agencias (nacional, estatal, federal e internacional). NASA: no solo lo utilizan para la mayor parte de su computaci\u00f3n, sino que adem\u00e1s contribuyen al c\u00f3digo. Hospitales Red de trenes de alta velocidad de Jap\u00f3n (bullet trains). Control de tr\u00e1fico. Institutos financieros. Liders de comercio online (Amazon, Paypal, Ebay o Walmart. Muchas otras compa\u00f1\u00edas (Google, IBM, Facebook, Mcdonals...). Dentro de las versiones de GNU/Linux en entornos empresariales destacan las siguientes: Redhat. CentOS: administrado tambi\u00e9n por Redhat y totalmente gratuito. No recibe soporte t\u00e9cnico de Redhat. Fedora Server: gratuito. Suse Linux Enterprise Server: pertenece a la compa\u00f1\u00eda Novell. VMWare utiliza Suse como entorno. Debian. Ubuntu Server. Diferencias principales entre los sistemas operativos Organizaci\u00f3n de los ficheros en el disco duro El disco duro es el componente donde se almacena la informaci\u00f3n del ordenador. Internamente, los archivos se organizan en una jerarqu\u00eda de carpetas (tambi\u00e9n llamadas directorios) y ficheros. Organizaci\u00f3n de los datos en sistemas Windows En los sistemas Windows, tanto los discos duros como los pendrives, tarjetas SD u otros dispositivos de almacenamiento se representan con una letra (C, D, E, F, G, H...). Cada letra representa un disco f\u00edsico donde se almacena la informaci\u00f3n (a veces ese disco duro f\u00edsico se puede dividir en muchas letras y aparecer verse como si fuesen varios). Para acceder a la informaci\u00f3n de los discos en Windows puedes seguir los siguientes pasos: 1. Pulsa en el icono de Windows -> Este equipo. 2. En la secci\u00f3n \"Dispositivos y unidades\" puedes ver tus discos duros y su espacio ocupado y disponible. Como ves, est\u00e1n organizados por letras. 3. En Windows el disco principal (donde se guarda toda la informaci\u00f3n importante del sistema) es el disco C:/. Organizaci\u00f3n de los datos en sistemas GNU/Linux Al contrario que en Windows, en sistemas GNU/Linux los discos f\u00edsicos donde se almacena informaci\u00f3n no aparecen como letras. En estos sistemas existe una carpeta principal (llamada ra\u00edz) donde se almacena todo. Esta carpeta es \"/\". En Windows, la carpeta del usuario \"Marcos\" se encontrar\u00eda (por defecto) en C:\\Usuarios\\marcos . En GNU/Linux, la carpeta del usuario \"Marcos\" se encuentra (por defecto) en /home/marcos . En Windows los discos donde se almacena la informaci\u00f3n se denotan con letras (C, D, E...). En GNU/Linux todo se organiza en una carpeta ra\u00edz (/) independientemente del disco en que se encuentre f\u00edsicamente. Terminales de comandos En GNU/Linux se usa BASH como terminal, mientras que en Windows es habitual hoy en d\u00eda utilizar PowerShell. Extensiones de ficheros TODO: ver -> extensiones de ficheros TODO: tiendas de aplicaciones, archivos ocultos, terminales de comandos Archivos y carpetas TODO: diferencia ruta absoluta y rutas relativas, navegaci\u00f3n entre carpetas Sistemas de ficheros y particiones En la parte de componentes f\u00edsicos se ha hablado del almacenamiento de informaci\u00f3n en discos duros r\u00edgidos y discos en estado s\u00f3lido (SSD). Estos \u00faltimos son m\u00e1s modernos, m\u00e1s r\u00e1pidos y, por lo tanto, tambi\u00e9n m\u00e1s caros. A continuaci\u00f3n se muestran los distintos tipos de dispositivos de almacenamiento ordenadores de m\u00e1s r\u00e1pido a m\u00e1s lento y, a su vez, de m\u00e1s caro a m\u00e1s barato: | | | :--: | | SSD NVMe M.2 de 1TB por 157\u20ac a 28/08/2022 (obtenido de pccomponentes ) | SSD SATA3 de 2.5\" y 1TB por 157\u20ac a 28/08/2022 (obtenido de pccomponentes ) Disco duro mec\u00e1nico SATA3 de 3.5\" y 4TB por 91\u20ac a 28/08/2022 (obtenido de pccomponentes ) Esto nos da una idea de donde vamos a trabajar ahora (sobre estos discos/dispositivos f\u00edsicos). Los discos tienen una determinada capacidad (los dos primeros de la imaten son de 1 Terabyte o lo que es lo mismo, 1000 Gigabytes). TODO: particiones, sistemas de ficheros Arranque del sistema Respecto al arranque del sistema, existen cuatro conceptos importantes a entender: - BIOS (Sistema b\u00e1sico de entrada-salida) - UEFI (Unified Extensible Firmware Interface) - MBR - GPT BIOS y UEFI se refieren a dos gestores de arranque. Se encargan de iniciar los componentes de hardware e iniciar el sistema operativo. UEFI es la versi\u00f3n m\u00e1s moderna (BIOS se ha quedado obsoleta). A\u00fan as\u00ed, coloquialmente se sigue utilizando BIOS para denominar, en general, al gestor de arranque. MBR y GPT, por otro lado, son las tablas de particionado (GPT es la versi\u00f3n m\u00e1s moderna). Puedes consultar este enlace para m\u00e1s informaci\u00f3n. Referencias Germ\u00e1n Cocca. Windows vs MacOS vs Linux - Operating System Handbook. Freecodecamp. Obtenido de: https://www.freecodecamp.org/news/an-introduction-to-operating-systems/#thethreemainoss Dong Ngo. File System and Partition Explained: How to Take Control of Your Storage. Dongknows. Obtenido de: https://dongknows.com/disk-partition-and-file-system-explained/#what-is-a-partition Imran Afzal. Complete Linux Training Course to Get Your Dream IT Job 2022. Curso en Udemy. Obtenido de: https://www.udemy.com/course/complete-linux-training-course-to-get-your-dream-it-job/ Pedro. MBR o GPT - \u00bfCu\u00e1l es la diferencia y cu\u00e1l es mejor?. EaseUS. Obtenido de: https://es.easeus.com/partition-manager-tips/mbr-y-gpt.html","title":"Introducci\u00f3n a los sistemas operativos"},{"location":"1-intro/3-intro-sos/#sistemas-operativos","text":"Sistemas operativos de prop\u00f3sito general : o de uso general, el que utilizan las personas en su casa. Sistemas operativos en modo servidor : orientados a dar servicios a otras personas. P. ej: alojar webs a las que se accede desde navegadores web.","title":"Sistemas operativos"},{"location":"1-intro/3-intro-sos/#sistemas-operativos-de-proposito-general","text":"Podemos ordenar los sistemas operativos mas habituales actualmente en tres grupos: Windows MacOS GNU/Linux","title":"Sistemas operativos de prop\u00f3sito general"},{"location":"1-intro/3-intro-sos/#sistemas-windows","text":"Tienen alrededor del 80% de la cuota de mercado en 2022. Los sistemas operativos de Microsoft nacen en 1981 con MS-DOS (el cu\u00e1l solo funciona por un terminal de texto, no tiene ventanas todav\u00eda). Para hacerlo m\u00e1s accesible para el p\u00fablico general las ventanas (la primera interfaz gr\u00e1fica de usuario o GUI) nace con Windows 1.0 en 1985. V\u00eddeo (Historia de Windows en 3 minutos)","title":"Sistemas Windows"},{"location":"1-intro/3-intro-sos/#macos","text":"MacOS (antes llamado OS X) es la l\u00ednea de sistemas operativos creada por Apple para sus ordenadores (igual que lo es la marca Windows para Microsoft). La primera versi\u00f3n tiene fecha de 1984 y fue el primer ordenador personal que inclu\u00eda una GUI (interfaz gr\u00e1fica de usuario). Apple tiene un modelo de negocio basado en la exclusividad y la diferenciaci\u00f3n con la competencia. Al contrario que Microsoft, Apple hace tanto el hardware como el software de sus productos.","title":"MacOS"},{"location":"1-intro/3-intro-sos/#gnulinux","text":"GNU/Linux es la base de muchos sistemas operativos de c\u00f3digo abierto. GNU/Linux no es un sistema operativo completo, sino una serie de programas y herramientas con un n\u00facleo ( kernel ) que comparten muchos sistemas operativos (OpenSuse, Ubuntu, Linux Mint, Debian, etc.). Los nombres m\u00e1s importantes detr\u00e1s de GNU/Linux son Richard Stallman y Linus Torvalds .","title":"GNU/Linux"},{"location":"1-intro/3-intro-sos/#distribuciones-gnulinux-y-entornos-de-escritorio","text":"Existen m\u00faltiples distribuciones basadas en Linux con diferentes caracter\u00edsticas (Debian, OpenSuse, Ubuntu, Linux Mint, Zorin OS, Fedora, Archilinux, etc.). Adem\u00e1s, cada una de estas distribuciones se puede usar con diferentes entornos de escritorio (puedes imaginarte unos m\u00e1s parecidos al estilo de Windows, otros m\u00e1s parecidos a MacOS y otros diferentes a ambos). Las distribuciones GNU/Linux m\u00e1s habituales y m\u00e1s \u201cbeginner friendly\u201d son las basadas en Ubuntu. Las versiones m\u00e1s habituales de Ubuntu son las siguientes: Ubuntu con entorno de escritorio \u201cGnome\u201d (denominado como Ubuntu ) . Ubuntu con entorno de escritorio \u201cKDE\u201d (denominado como Kubuntu ). Para ordenadores antiguos o con muy pocos recursos: Ubuntu con entorno de escritorio \u201cXFCE\u201d ( Xubuntu ). Ubuntu con entorno de escritorio \u201cLXDE\u201d ( Lubuntu ). A continuaci\u00f3n se muestran im\u00e1genes de distintos sistemas operativos y entornos de escritorio: Ubuntu con GNOME (Ubuntu) Ubuntu con KDE (Kubuntu) Ubuntu con LXDE (Lubuntu) Linux Mint (distribuci\u00f3n basada en Ubuntu) con entorno de escritorio Cinnamon Linux Mint con entorno de escritorio denominado MATE Zorin OS (distribuci\u00f3n basada en Ubuntu y Windows friendly ). Tiene un entorno de escritorio GNOME adaptado por ellos mismos para hacerlo m\u00e1s familiar a Windows. Como veis, es posible tener el mismo sistema operativo con diferente entorno de escritorio . GNOME, KDE, XFCE, Cinnamon, MATE o LXDE son entornos de escritorio diferentes. Iniciarse en GNU/Linux : si quieres iniciarte en GNU/Linux en uso personal usar Ubuntu o una distribuci\u00f3n basada en Ubuntu es la mejor opci\u00f3n. Mis recomendaciones para empezar: Ubuntu (el normal con Gnome), Linux Mint (Cinnamon) o Zorin OS. Algunos sistemas operativos o entornos de escritorio en GNU/Linux consumen muy pocos y est\u00e1n preparados para dar una segunda vida a ordenadores antiguos. Si quieres dar una segunda vida a un ordenador antiguo sigue este enlace .","title":"Distribuciones GNU/Linux y entornos de escritorio"},{"location":"1-intro/3-intro-sos/#sistemas-operativos-en-servidor","text":"","title":"Sistemas operativos en servidor"},{"location":"1-intro/3-intro-sos/#windows-en-servidores","text":"Para servidores, Microsoft dispone de versiones denominadas Windows Server (p. ej: Windows Server 2012 o Windows Server 2022, la m\u00e1s reciente).","title":"Windows en servidores"},{"location":"1-intro/3-intro-sos/#descarga","text":"Para descargar cualquier sistema operativo de Microsoft en versi\u00f3n de prueba se puede acceder al centro de evaluaci\u00f3n de microsoft y posteriormente seleccionar el sistema operativo deseado.","title":"Descarga"},{"location":"1-intro/3-intro-sos/#versiones","text":"En WS 2019 tenemos lo siguiente, de m\u00e1s barato a m\u00e1s caro: Windows Server 2019 Essential . Destinado a peque\u00f1os negocios y con un m\u00e1ximo de 25 usuarios pueden conectarse a el y 50 dispositivos. Actualmente Microsoft recomienda no usar esta versi\u00f3n y utilizar, en su lugar, su soluci\u00f3n de servidores en la nube Microsoft 365. Windows Server 2019 Standard : bueno para entornos f\u00edsicos (que no usan m\u00e1quinas o casi no usan m\u00e1quinas virtuales). Viene solamente con dos licencias virtuales (es decir, podemos instalar WS2019 Standard con dos VMs en HyperV pero no incrementar a una tercera a no ser que la compremos). Adem\u00e1s, si usamos el servidor f\u00edsico para cualquier otra cosa que no sea esas dos m\u00e1quinas virtuales entonces consumir\u00e1 una de esas licencias. Windows Server 2019 Datacenter : viene con licencias ilimitadas para ejecutar m\u00e1quinas virtuales (esto es, puedes crear tantas VMs como quieras). Hyper-V server 2019 : servidor dedicado de m\u00e1quinas virtuales con Hyper-V. Se puede descargar de la web de Microsoft con infinitas m\u00e1quinas virtuales. Viene sin GUI y no podemos hacer otra cosa que albergar en el m\u00e1quinas virtuales. Las diferencias m\u00e1s grandes que hay entre las versiones Standard y Datacenter es el n\u00famero de licencias para virtualizaci\u00f3n.","title":"Versiones"},{"location":"1-intro/3-intro-sos/#gnulinux-en-servidores","text":"Algunos usuarios habituales de Linux son los siguientes: Gobierno de los Estados Unidos y algunas de sus agencias (nacional, estatal, federal e internacional). NASA: no solo lo utilizan para la mayor parte de su computaci\u00f3n, sino que adem\u00e1s contribuyen al c\u00f3digo. Hospitales Red de trenes de alta velocidad de Jap\u00f3n (bullet trains). Control de tr\u00e1fico. Institutos financieros. Liders de comercio online (Amazon, Paypal, Ebay o Walmart. Muchas otras compa\u00f1\u00edas (Google, IBM, Facebook, Mcdonals...). Dentro de las versiones de GNU/Linux en entornos empresariales destacan las siguientes: Redhat. CentOS: administrado tambi\u00e9n por Redhat y totalmente gratuito. No recibe soporte t\u00e9cnico de Redhat. Fedora Server: gratuito. Suse Linux Enterprise Server: pertenece a la compa\u00f1\u00eda Novell. VMWare utiliza Suse como entorno. Debian. Ubuntu Server.","title":"GNU/Linux en servidores"},{"location":"1-intro/3-intro-sos/#diferencias-principales-entre-los-sistemas-operativos","text":"","title":"Diferencias principales entre los sistemas operativos"},{"location":"1-intro/3-intro-sos/#organizacion-de-los-ficheros-en-el-disco-duro","text":"El disco duro es el componente donde se almacena la informaci\u00f3n del ordenador. Internamente, los archivos se organizan en una jerarqu\u00eda de carpetas (tambi\u00e9n llamadas directorios) y ficheros.","title":"Organizaci\u00f3n de los ficheros en el disco duro"},{"location":"1-intro/3-intro-sos/#organizacion-de-los-datos-en-sistemas-windows","text":"En los sistemas Windows, tanto los discos duros como los pendrives, tarjetas SD u otros dispositivos de almacenamiento se representan con una letra (C, D, E, F, G, H...). Cada letra representa un disco f\u00edsico donde se almacena la informaci\u00f3n (a veces ese disco duro f\u00edsico se puede dividir en muchas letras y aparecer verse como si fuesen varios). Para acceder a la informaci\u00f3n de los discos en Windows puedes seguir los siguientes pasos: 1. Pulsa en el icono de Windows -> Este equipo. 2. En la secci\u00f3n \"Dispositivos y unidades\" puedes ver tus discos duros y su espacio ocupado y disponible. Como ves, est\u00e1n organizados por letras. 3. En Windows el disco principal (donde se guarda toda la informaci\u00f3n importante del sistema) es el disco C:/.","title":"Organizaci\u00f3n de los datos en sistemas Windows"},{"location":"1-intro/3-intro-sos/#organizacion-de-los-datos-en-sistemas-gnulinux","text":"Al contrario que en Windows, en sistemas GNU/Linux los discos f\u00edsicos donde se almacena informaci\u00f3n no aparecen como letras. En estos sistemas existe una carpeta principal (llamada ra\u00edz) donde se almacena todo. Esta carpeta es \"/\". En Windows, la carpeta del usuario \"Marcos\" se encontrar\u00eda (por defecto) en C:\\Usuarios\\marcos . En GNU/Linux, la carpeta del usuario \"Marcos\" se encuentra (por defecto) en /home/marcos . En Windows los discos donde se almacena la informaci\u00f3n se denotan con letras (C, D, E...). En GNU/Linux todo se organiza en una carpeta ra\u00edz (/) independientemente del disco en que se encuentre f\u00edsicamente.","title":"Organizaci\u00f3n de los datos en sistemas GNU/Linux"},{"location":"1-intro/3-intro-sos/#terminales-de-comandos","text":"En GNU/Linux se usa BASH como terminal, mientras que en Windows es habitual hoy en d\u00eda utilizar PowerShell.","title":"Terminales de comandos"},{"location":"1-intro/3-intro-sos/#extensiones-de-ficheros","text":"TODO: ver -> extensiones de ficheros TODO: tiendas de aplicaciones, archivos ocultos, terminales de comandos","title":"Extensiones de ficheros"},{"location":"1-intro/3-intro-sos/#archivos-y-carpetas","text":"TODO: diferencia ruta absoluta y rutas relativas, navegaci\u00f3n entre carpetas","title":"Archivos y carpetas"},{"location":"1-intro/3-intro-sos/#sistemas-de-ficheros-y-particiones","text":"En la parte de componentes f\u00edsicos se ha hablado del almacenamiento de informaci\u00f3n en discos duros r\u00edgidos y discos en estado s\u00f3lido (SSD). Estos \u00faltimos son m\u00e1s modernos, m\u00e1s r\u00e1pidos y, por lo tanto, tambi\u00e9n m\u00e1s caros. A continuaci\u00f3n se muestran los distintos tipos de dispositivos de almacenamiento ordenadores de m\u00e1s r\u00e1pido a m\u00e1s lento y, a su vez, de m\u00e1s caro a m\u00e1s barato: | | | :--: | | SSD NVMe M.2 de 1TB por 157\u20ac a 28/08/2022 (obtenido de pccomponentes ) | SSD SATA3 de 2.5\" y 1TB por 157\u20ac a 28/08/2022 (obtenido de pccomponentes ) Disco duro mec\u00e1nico SATA3 de 3.5\" y 4TB por 91\u20ac a 28/08/2022 (obtenido de pccomponentes ) Esto nos da una idea de donde vamos a trabajar ahora (sobre estos discos/dispositivos f\u00edsicos). Los discos tienen una determinada capacidad (los dos primeros de la imaten son de 1 Terabyte o lo que es lo mismo, 1000 Gigabytes). TODO: particiones, sistemas de ficheros","title":"Sistemas de ficheros y particiones"},{"location":"1-intro/3-intro-sos/#arranque-del-sistema","text":"Respecto al arranque del sistema, existen cuatro conceptos importantes a entender: - BIOS (Sistema b\u00e1sico de entrada-salida) - UEFI (Unified Extensible Firmware Interface) - MBR - GPT BIOS y UEFI se refieren a dos gestores de arranque. Se encargan de iniciar los componentes de hardware e iniciar el sistema operativo. UEFI es la versi\u00f3n m\u00e1s moderna (BIOS se ha quedado obsoleta). A\u00fan as\u00ed, coloquialmente se sigue utilizando BIOS para denominar, en general, al gestor de arranque. MBR y GPT, por otro lado, son las tablas de particionado (GPT es la versi\u00f3n m\u00e1s moderna). Puedes consultar este enlace para m\u00e1s informaci\u00f3n.","title":"Arranque del sistema"},{"location":"1-intro/3-intro-sos/#referencias","text":"Germ\u00e1n Cocca. Windows vs MacOS vs Linux - Operating System Handbook. Freecodecamp. Obtenido de: https://www.freecodecamp.org/news/an-introduction-to-operating-systems/#thethreemainoss Dong Ngo. File System and Partition Explained: How to Take Control of Your Storage. Dongknows. Obtenido de: https://dongknows.com/disk-partition-and-file-system-explained/#what-is-a-partition Imran Afzal. Complete Linux Training Course to Get Your Dream IT Job 2022. Curso en Udemy. Obtenido de: https://www.udemy.com/course/complete-linux-training-course-to-get-your-dream-it-job/ Pedro. MBR o GPT - \u00bfCu\u00e1l es la diferencia y cu\u00e1l es mejor?. EaseUS. Obtenido de: https://es.easeus.com/partition-manager-tips/mbr-y-gpt.html","title":"Referencias"},{"location":"1-intro/4-virtual-machines/","text":"Virtualizaci\u00f3n y contenedores Existen herramientas que permiten, dentro de tu sistema Windows o Linux, virtualizar otro ordenador . Esto es, dentro de tu ordenador tener \"varios ordenadores\" en entornos totalmente aislados. Estos ordenadores aislados se denominan m\u00e1quinas virtuales y el proceso se denomina virtualizaci\u00f3n. Algunas herramientas de virtualizaci\u00f3n son las siguientes: VirtualBox (C\u00f3digo abierto) VMWare Hyper-V (viene con las versiones profesionales de Windows). VirtualBox Instalaci\u00f3n de GNU/Linux en un ordenador antiguo TODO Instalaci\u00f3n de sistemas GNU/Linux en VirtualBox TODO Contenedores? TODO (bases de Docker si sobra tiempo y para profundizar)","title":"Virtualizaci\u00f3n"},{"location":"1-intro/4-virtual-machines/#virtualizacion-y-contenedores","text":"Existen herramientas que permiten, dentro de tu sistema Windows o Linux, virtualizar otro ordenador . Esto es, dentro de tu ordenador tener \"varios ordenadores\" en entornos totalmente aislados. Estos ordenadores aislados se denominan m\u00e1quinas virtuales y el proceso se denomina virtualizaci\u00f3n. Algunas herramientas de virtualizaci\u00f3n son las siguientes: VirtualBox (C\u00f3digo abierto) VMWare Hyper-V (viene con las versiones profesionales de Windows).","title":"Virtualizaci\u00f3n y contenedores"},{"location":"1-intro/4-virtual-machines/#virtualbox","text":"","title":"VirtualBox"},{"location":"1-intro/4-virtual-machines/#instalacion-de-gnulinux-en-un-ordenador-antiguo","text":"TODO","title":"Instalaci\u00f3n de GNU/Linux en un ordenador antiguo"},{"location":"1-intro/4-virtual-machines/#instalacion-de-sistemas-gnulinux-en-virtualbox","text":"TODO","title":"Instalaci\u00f3n de sistemas GNU/Linux en VirtualBox"},{"location":"1-intro/4-virtual-machines/#contenedores","text":"TODO (bases de Docker si sobra tiempo y para profundizar)","title":"Contenedores?"},{"location":"1-intro/multimedia/","text":"","title":"Multimedia"},{"location":"gnu-linux/linux-setup/","text":"Instalaci\u00f3n y configuraci\u00f3n de entornos Linux Conceptos b\u00e1sicos Interfaces de usuario Existen varios t\u00e9rminos para describir interfaces gr\u00e1ficas: UI : U ser I nterface (en espa\u00f1ol IU: I nterfaz de U suario). Lo que ves en tu ordenador ahora mismo se llama GUI (Interfaz gr\u00e1fica de usuario o Graphical User Interface ). Los terminales de comandos. GUI : G raphical U ser I nterface o interfaz gr\u00e1fica de usuario. La diferencia es que la G ( graphical ) indica que es una interfaz en modo gr\u00e1fico y no en modo texto. En sistemas basados en Linux existen diferentes interfaces gr\u00e1ficas: GNOME, KDE, XFCE, LXDE, Cinnamon, MATE... Arquitectura del sistema Imagen obtenida de: Wikipedia Kernel (n\u00facleo) Podemos imaginarnos el kernel como un programa en la parte m\u00e1s profunda del sistema operativo y que se ocupa de la interactuaci\u00f3n con el hardware (procesador, disco duro, ram...). Cuando desde un terminal ejecutamos un comando, el kernel lo recibe y se ocupa de interactuar con el hardware. Aunque muchas veces trata a las distribuciones (Ubuntu, Fedora, Linux Mint, ArchLinux...) como \"Linux\" a secas, realmente Linux es el kernel o n\u00facleo y todos esos nombres son distribuciones diferentes que usan ese kernel. Cuando decimos que vamos a \"instalar un Linux\", nos solemos referir a que vamos a instalar una distribuci\u00f3n que usa el n\u00facleo creado por Linus Torvalds en 1991 (y al que denomin\u00f3 como Linux). El sistema operativo de muchos smartphones (Android) usa una versi\u00f3n modificada de Linux. Shell El Shell estar\u00eda, en la imagen, entre las aplicaciones y el Kernel. Un Shell hace de interfaz entre los usuarios y el sistema operativo. La interfaz gr\u00e1fica de Windows y las distintas disponibles en GNU/Linux son tambi\u00e9n Shells, al igual que muchas por comandos como: bash, sh, zsh... Tipos de shells en Linux Gnome, KDE (y otras GUIs): los comandos realmente se ejecutan, pero se hace mediante clicks en diferentes sitios, arrastrando y soltando, etc. A\u00fan as\u00ed, estos son tambi\u00e9n shells. Shells de l\u00ednea de comandos: SH (Bourne Shell): es una de las shells m\u00e1s antiguas de Linux. BASH (Born Again Shell): tiene muchas mejoras sobre la anterior y es la que viene por defecto en GNU/Linux. CSH y TCSH: no suelen utilizarse salvo que tengas mucho control sobre lenguajes de programaci\u00f3n C y C++. KSH (Korn Shell): muy utilizada en Solaris. ZSH y Fish: de las m\u00e1s interesantes hoy en d\u00eda. Si piensas usar Linux de forma habitual en escritorio mi recomendaci\u00f3n es que intentes instalar una de estas dos para mejorar la experiencia en terminal. Si consultas el fichero /etc/shells puedes ver la lista de shells que tienes instaladas en el sistema. Aplicaciones Una aplicaci\u00f3n puede ejecutarse por interfaz gr\u00e1fica, pero tambi\u00e9n por terminal de comandos. Muchas aplicaciones gr\u00e1ficas lo que hacen realmente (al pulsar, por ejemplo, un bot\u00f3n) es ejecutar comandos en un shell concreto. Este shell, a su vez, interact\u00faa con el Kernel que a su vez lo hace con el hardware. As\u00ed es como se produce toda la comunicaci\u00f3n entre las capas. Si ejecutamos, por ejemplo, una aplicaci\u00f3n (imaginemos Steam), esa aplicaci\u00f3n se ejecuta en un Shell, el cu\u00e1l a su vez se comunica con el Kernel y este finalmente con el hardware. Hay una comunicaci\u00f3n completa desde el usuario hasta el hardware. Sistema operativo La combinaci\u00f3n del Kernel, el Shell y los programas a m\u00e1s bajo nivel es lo que forma el sistema operativo. Terminal de comandos Un terminal de comandos es una interfaz en modo texto usada para controlar un ordenador (ya sea Linux o Windows). A continuaci\u00f3n se muestra el ejemplo de un terminal de comandos en un sistema operativo basado en Linux (Raspbian): No te preocupes si lo que ves te resulta extra\u00f1o ahora, ya que en pocos d\u00edas entender\u00e1s perfectamente todo lo que aparece en esa imagen. Comandos b\u00e1sicos de GNU/Linux Acci\u00f3n Comando Reiniciar ordenador sudo reboot Apagar ordenador sudo shutdown -h now Ver procesos top htop ps ps -ef Probar conexi\u00f3n y latencia ping www.google.com ping 151.101.133.50 Ver informaci\u00f3n de red ip address Mostrar mensaje por pantalla echo \"mensaje\". Por ejemplo: echo \"Hola mundo\" echo \"Estoy ejecut\u00e1ndome en el SHELL: $0.\" Comandos de carpetas y ficheros La ra\u00edz de todas las carpetas (tambi\u00e9n llamadas directorios) se denomina en Windows como C: . En GNU/Linux , en cambio, la ra\u00edz de todo es \u201c/\u201d . Un usuario se sit\u00faa en Windows y GNU/Linux en las siguientes carpetas: Windows 10 : \u2003 C:/Usuarios/ nombreUsuario / GNU/Linux : \u2003 /home/ nombreUsuario / Acci\u00f3n Comando Ejemplo Ver d\u00f3nde est\u00e1s pwd pwd Listar ficheros ls -l ls -la ls -lh ls (muestra ficheros, pero no los ocultos) ls -l (muestra ficheros e informaci\u00f3n) ls -a (muestra ficheros, inclu\u00eddos los ocultos) ls -lh (muestra informaci\u00f3n y \"h\" de human readable ) Moverse entre carpetas cd ruta_carpeta Si estoy en /home/mnceleiro puedo moverme a \"Documentos\" de dos formas: Ruta absoluta (pongo la ruta completa) cd /home/mnceleiro/Documentos Ruta relativa (pongo solo desde donde estoy) cd Documentos Para volver atr\u00e1s (.. representa la carpeta superior) cd .. Crear carpeta mkdir nombre_carpeta mkdir clase Crear fichero vac\u00edo touch nombre_fichero touch datos.txt Eliminar algo rm nombre_carpeta rm nombre_fichero rm partidos rm -r MisFotos Si hay cosas dentro de una carpeta y queremos que borre la carpeta con todo el contenido de dentro hay que usar la opci\u00f3n -r . Mover carpeta Mover un fichero: mv origen destino Mover carpeta con cosas: mv -R origen destino Mover usando rutas absolutas (ruta completa) mv /home/mnceleiro/downloads/datos.txt /home/mnceleiro/documents/datos.txt Mover usando rutas relativas (relativo al directorio donde te encuentras) mv datos.txt ../documents.datos.txt Si usas la opci\u00f3n -R puedes mover una carpeta y todo lo que tiene dentro. Cambiar nombre a algo mv nombre_antiguo nombre_nuevo mv datos.txt ../documents/datoscopia.txt Tambi\u00e9n puede usarse para mover y con -R Ver contenido de un fichero cat cat -l cat /etc/shells (el archivo shells tiene una lista con los shells instalados en el sistema) cat /etc/passwd (en este fichero se almacenan los datos de los usuarios del sistema) Instalaci\u00f3n de software Existen distintas tiendas de aplicaciones seg\u00fan la distribuci\u00f3n GNU/Linux usada as\u00ed como gestores de paquetes. El gestor de paquetes m\u00e1s conocido se llama APT y es usado en distribuciones basadas en Debian, por ejemplo: Ubuntu, Linux Mint, Zorin OS, Steam OS. Los comandos m\u00e1s interesantes a usar con la herramienta APT son los siguientes: Acci\u00f3n Comando Ejemplo Instalar apt install programa sudo apt install kdenlive Para instalar sin que pida confirmaci\u00f3n: sudo apt install -y libreoffice Eliminar apt remove programa sudo apt remove gimp Actualizar apt update apt upgrade sudo apt update sudo apt upgrade Es importante tener en cuenta que apt no es el \u00fanico gestor de software disponible . Aunque apt es probablemente la mejor forma de instalar cosas, a veces hay aplicaciones que no se encuentran aqu\u00ed. Si no encuentras la aplicaci\u00f3n en apt podr\u00edas buscar la aplicaci\u00f3n en internet y descargarla desde la p\u00e1gina oficial (tal y como har\u00edas en Windows) o incluso buscar en internet alg\u00fan tutorial de como hacerlo, por ejemplo: Instalar Spotify en Ubuntu (filtrando \u00faltimo a\u00f1o) . Instalar Steam en Ubuntu (filtrando \u00faltimo a\u00f1o) . Te recomiendo hacerlo filtrando por \"\u00faltimo a\u00f1o\" o por la versi\u00f3n de Linux que tengas. Por ejemplo: \"Instalar Spotify en Ubuntu 20.04\" . Gesti\u00f3n de procesos Acci\u00f3n Comando Descripci\u00f3n/Ejemplos Ver procesos top htop ps -ef top y htop son interactivos (htop requiere instalaci\u00f3n). Ejemplo de ps: ps -ef | grep firefox (filtra procesos con nombre firefox mediante grep) Ver procesos (en forma de \u00e1rbol) pstree ps + tree Matar procesos (por c\u00f3digo) kill [-c\u00f3digo] Supongamos que queremos matar firefox (hay que mirar cu\u00e1l es su ID de PROCESO, puedes hacerlo usando htop o ps): ps -e \\| grep firefox Matar un proceso de forma normal (por defecto usa c\u00f3digo 15): kill 12345 Matar un proceso de manera forzada (p. ej: si se queda trabado). Para matar de forma forzada el c\u00f3digo es el 9: kill -9 12345 Matar procesos (por nombre) killall [-c\u00f3digo] killall firefox Matar el proceso (forzandolo): killall -9 firefox Puedes consultar m\u00e1s informaci\u00f3n sobre como matar procesos y c\u00f3digos de proceso aqu\u00ed . Referencias: Imran Afzal. Complete Linux Bash Shell Scripting with Real Life Examples. Udemy. Disponible en: https://www.udemy.com/course/linux-bash-shell-scripting-through-real-life-examples/","title":"Comandos b\u00e1sicos"},{"location":"gnu-linux/linux-setup/#instalacion-y-configuracion-de-entornos-linux","text":"","title":"Instalaci\u00f3n y configuraci\u00f3n de entornos Linux"},{"location":"gnu-linux/linux-setup/#conceptos-basicos","text":"","title":"Conceptos b\u00e1sicos"},{"location":"gnu-linux/linux-setup/#interfaces-de-usuario","text":"Existen varios t\u00e9rminos para describir interfaces gr\u00e1ficas: UI : U ser I nterface (en espa\u00f1ol IU: I nterfaz de U suario). Lo que ves en tu ordenador ahora mismo se llama GUI (Interfaz gr\u00e1fica de usuario o Graphical User Interface ). Los terminales de comandos. GUI : G raphical U ser I nterface o interfaz gr\u00e1fica de usuario. La diferencia es que la G ( graphical ) indica que es una interfaz en modo gr\u00e1fico y no en modo texto. En sistemas basados en Linux existen diferentes interfaces gr\u00e1ficas: GNOME, KDE, XFCE, LXDE, Cinnamon, MATE...","title":"Interfaces de usuario"},{"location":"gnu-linux/linux-setup/#arquitectura-del-sistema","text":"Imagen obtenida de: Wikipedia","title":"Arquitectura del sistema"},{"location":"gnu-linux/linux-setup/#kernel-nucleo","text":"Podemos imaginarnos el kernel como un programa en la parte m\u00e1s profunda del sistema operativo y que se ocupa de la interactuaci\u00f3n con el hardware (procesador, disco duro, ram...). Cuando desde un terminal ejecutamos un comando, el kernel lo recibe y se ocupa de interactuar con el hardware. Aunque muchas veces trata a las distribuciones (Ubuntu, Fedora, Linux Mint, ArchLinux...) como \"Linux\" a secas, realmente Linux es el kernel o n\u00facleo y todos esos nombres son distribuciones diferentes que usan ese kernel. Cuando decimos que vamos a \"instalar un Linux\", nos solemos referir a que vamos a instalar una distribuci\u00f3n que usa el n\u00facleo creado por Linus Torvalds en 1991 (y al que denomin\u00f3 como Linux). El sistema operativo de muchos smartphones (Android) usa una versi\u00f3n modificada de Linux.","title":"Kernel (n\u00facleo)"},{"location":"gnu-linux/linux-setup/#shell","text":"El Shell estar\u00eda, en la imagen, entre las aplicaciones y el Kernel. Un Shell hace de interfaz entre los usuarios y el sistema operativo. La interfaz gr\u00e1fica de Windows y las distintas disponibles en GNU/Linux son tambi\u00e9n Shells, al igual que muchas por comandos como: bash, sh, zsh...","title":"Shell"},{"location":"gnu-linux/linux-setup/#tipos-de-shells-en-linux","text":"Gnome, KDE (y otras GUIs): los comandos realmente se ejecutan, pero se hace mediante clicks en diferentes sitios, arrastrando y soltando, etc. A\u00fan as\u00ed, estos son tambi\u00e9n shells. Shells de l\u00ednea de comandos: SH (Bourne Shell): es una de las shells m\u00e1s antiguas de Linux. BASH (Born Again Shell): tiene muchas mejoras sobre la anterior y es la que viene por defecto en GNU/Linux. CSH y TCSH: no suelen utilizarse salvo que tengas mucho control sobre lenguajes de programaci\u00f3n C y C++. KSH (Korn Shell): muy utilizada en Solaris. ZSH y Fish: de las m\u00e1s interesantes hoy en d\u00eda. Si piensas usar Linux de forma habitual en escritorio mi recomendaci\u00f3n es que intentes instalar una de estas dos para mejorar la experiencia en terminal. Si consultas el fichero /etc/shells puedes ver la lista de shells que tienes instaladas en el sistema.","title":"Tipos de shells en Linux"},{"location":"gnu-linux/linux-setup/#aplicaciones","text":"Una aplicaci\u00f3n puede ejecutarse por interfaz gr\u00e1fica, pero tambi\u00e9n por terminal de comandos. Muchas aplicaciones gr\u00e1ficas lo que hacen realmente (al pulsar, por ejemplo, un bot\u00f3n) es ejecutar comandos en un shell concreto. Este shell, a su vez, interact\u00faa con el Kernel que a su vez lo hace con el hardware. As\u00ed es como se produce toda la comunicaci\u00f3n entre las capas. Si ejecutamos, por ejemplo, una aplicaci\u00f3n (imaginemos Steam), esa aplicaci\u00f3n se ejecuta en un Shell, el cu\u00e1l a su vez se comunica con el Kernel y este finalmente con el hardware. Hay una comunicaci\u00f3n completa desde el usuario hasta el hardware.","title":"Aplicaciones"},{"location":"gnu-linux/linux-setup/#sistema-operativo","text":"La combinaci\u00f3n del Kernel, el Shell y los programas a m\u00e1s bajo nivel es lo que forma el sistema operativo.","title":"Sistema operativo"},{"location":"gnu-linux/linux-setup/#terminal-de-comandos","text":"Un terminal de comandos es una interfaz en modo texto usada para controlar un ordenador (ya sea Linux o Windows). A continuaci\u00f3n se muestra el ejemplo de un terminal de comandos en un sistema operativo basado en Linux (Raspbian): No te preocupes si lo que ves te resulta extra\u00f1o ahora, ya que en pocos d\u00edas entender\u00e1s perfectamente todo lo que aparece en esa imagen.","title":"Terminal de comandos"},{"location":"gnu-linux/linux-setup/#comandos-basicos-de-gnulinux","text":"Acci\u00f3n Comando Reiniciar ordenador sudo reboot Apagar ordenador sudo shutdown -h now Ver procesos top htop ps ps -ef Probar conexi\u00f3n y latencia ping www.google.com ping 151.101.133.50 Ver informaci\u00f3n de red ip address Mostrar mensaje por pantalla echo \"mensaje\". Por ejemplo: echo \"Hola mundo\" echo \"Estoy ejecut\u00e1ndome en el SHELL: $0.\"","title":"Comandos b\u00e1sicos de GNU/Linux"},{"location":"gnu-linux/linux-setup/#comandos-de-carpetas-y-ficheros","text":"La ra\u00edz de todas las carpetas (tambi\u00e9n llamadas directorios) se denomina en Windows como C: . En GNU/Linux , en cambio, la ra\u00edz de todo es \u201c/\u201d . Un usuario se sit\u00faa en Windows y GNU/Linux en las siguientes carpetas: Windows 10 : \u2003 C:/Usuarios/ nombreUsuario / GNU/Linux : \u2003 /home/ nombreUsuario / Acci\u00f3n Comando Ejemplo Ver d\u00f3nde est\u00e1s pwd pwd Listar ficheros ls -l ls -la ls -lh ls (muestra ficheros, pero no los ocultos) ls -l (muestra ficheros e informaci\u00f3n) ls -a (muestra ficheros, inclu\u00eddos los ocultos) ls -lh (muestra informaci\u00f3n y \"h\" de human readable ) Moverse entre carpetas cd ruta_carpeta Si estoy en /home/mnceleiro puedo moverme a \"Documentos\" de dos formas: Ruta absoluta (pongo la ruta completa) cd /home/mnceleiro/Documentos Ruta relativa (pongo solo desde donde estoy) cd Documentos Para volver atr\u00e1s (.. representa la carpeta superior) cd .. Crear carpeta mkdir nombre_carpeta mkdir clase Crear fichero vac\u00edo touch nombre_fichero touch datos.txt Eliminar algo rm nombre_carpeta rm nombre_fichero rm partidos rm -r MisFotos Si hay cosas dentro de una carpeta y queremos que borre la carpeta con todo el contenido de dentro hay que usar la opci\u00f3n -r . Mover carpeta Mover un fichero: mv origen destino Mover carpeta con cosas: mv -R origen destino Mover usando rutas absolutas (ruta completa) mv /home/mnceleiro/downloads/datos.txt /home/mnceleiro/documents/datos.txt Mover usando rutas relativas (relativo al directorio donde te encuentras) mv datos.txt ../documents.datos.txt Si usas la opci\u00f3n -R puedes mover una carpeta y todo lo que tiene dentro. Cambiar nombre a algo mv nombre_antiguo nombre_nuevo mv datos.txt ../documents/datoscopia.txt Tambi\u00e9n puede usarse para mover y con -R Ver contenido de un fichero cat cat -l cat /etc/shells (el archivo shells tiene una lista con los shells instalados en el sistema) cat /etc/passwd (en este fichero se almacenan los datos de los usuarios del sistema)","title":"Comandos de carpetas y ficheros"},{"location":"gnu-linux/linux-setup/#instalacion-de-software","text":"Existen distintas tiendas de aplicaciones seg\u00fan la distribuci\u00f3n GNU/Linux usada as\u00ed como gestores de paquetes. El gestor de paquetes m\u00e1s conocido se llama APT y es usado en distribuciones basadas en Debian, por ejemplo: Ubuntu, Linux Mint, Zorin OS, Steam OS. Los comandos m\u00e1s interesantes a usar con la herramienta APT son los siguientes: Acci\u00f3n Comando Ejemplo Instalar apt install programa sudo apt install kdenlive Para instalar sin que pida confirmaci\u00f3n: sudo apt install -y libreoffice Eliminar apt remove programa sudo apt remove gimp Actualizar apt update apt upgrade sudo apt update sudo apt upgrade Es importante tener en cuenta que apt no es el \u00fanico gestor de software disponible . Aunque apt es probablemente la mejor forma de instalar cosas, a veces hay aplicaciones que no se encuentran aqu\u00ed. Si no encuentras la aplicaci\u00f3n en apt podr\u00edas buscar la aplicaci\u00f3n en internet y descargarla desde la p\u00e1gina oficial (tal y como har\u00edas en Windows) o incluso buscar en internet alg\u00fan tutorial de como hacerlo, por ejemplo: Instalar Spotify en Ubuntu (filtrando \u00faltimo a\u00f1o) . Instalar Steam en Ubuntu (filtrando \u00faltimo a\u00f1o) . Te recomiendo hacerlo filtrando por \"\u00faltimo a\u00f1o\" o por la versi\u00f3n de Linux que tengas. Por ejemplo: \"Instalar Spotify en Ubuntu 20.04\" .","title":"Instalaci\u00f3n de software"},{"location":"gnu-linux/linux-setup/#gestion-de-procesos","text":"Acci\u00f3n Comando Descripci\u00f3n/Ejemplos Ver procesos top htop ps -ef top y htop son interactivos (htop requiere instalaci\u00f3n). Ejemplo de ps: ps -ef | grep firefox (filtra procesos con nombre firefox mediante grep) Ver procesos (en forma de \u00e1rbol) pstree ps + tree Matar procesos (por c\u00f3digo) kill [-c\u00f3digo] Supongamos que queremos matar firefox (hay que mirar cu\u00e1l es su ID de PROCESO, puedes hacerlo usando htop o ps): ps -e \\| grep firefox Matar un proceso de forma normal (por defecto usa c\u00f3digo 15): kill 12345 Matar un proceso de manera forzada (p. ej: si se queda trabado). Para matar de forma forzada el c\u00f3digo es el 9: kill -9 12345 Matar procesos (por nombre) killall [-c\u00f3digo] killall firefox Matar el proceso (forzandolo): killall -9 firefox Puedes consultar m\u00e1s informaci\u00f3n sobre como matar procesos y c\u00f3digos de proceso aqu\u00ed . Referencias: Imran Afzal. Complete Linux Bash Shell Scripting with Real Life Examples. Udemy. Disponible en: https://www.udemy.com/course/linux-bash-shell-scripting-through-real-life-examples/","title":"Gesti\u00f3n de procesos"},{"location":"gnu-linux/scripting-linux/","text":"Shell scripting Existen m\u00faltiples shells (podemos ver cu\u00e1l estamos usando mostrando con echo la variable de entorno $SHELL). Mi primer script Contenido del script Para empezar, nuestro primer script mostrar\u00e1 en pantalla solamente la l\u00ednea: Hola mundo Para ello, editamos el script con nuestro editor preferido (p. ej: vim o nano) y a\u00f1adimos lo siguiente: #!/bin/bash echo \"Hola mundo.\" Permisos de ejecuci\u00f3n Para crear un script en BASH creamos un fichero con el nombre que queramos y le damos permisos de ejecuci\u00f3n (u+x): echo \"\" > helloworld.sh Esto crea un fichero helloworld.sh al que deber\u00edamos darle tambi\u00e9n permisos de ejecuci\u00f3n. Para dar permisos usamos el comando chmod y podemos hacerlo de dos maneras distintas: chmod u+x helloworld.sh o chmod 764 helloworld.sh Ejemplo de realizaci\u00f3n de la tarea de creaci\u00f3n de script y permisos de ejecuci\u00f3n para el usuario: Ejecuci\u00f3n Para ejecutar el script podemos usar cualquiera de los siguientes comandos: ./helloworld.sh bash helloworld.sh El resultado deber\u00eda ser el siguiente: Variables Una variable es un sitio en memoria para guardar informaci\u00f3n. Un ejemplo de creaci\u00f3n de una variable y asignaci\u00f3n de un n\u00famero a ella ser\u00eda el siguiente: EDAD=35 Veamoslo con un script de ejemplo: variables.sh # Ejercicio: crear una variable \"NOMBRE\" que almacene el nombre de una persona. Despu\u00e9s, mostrar por pantalla \"Tu nombre es ________.\" #!/bin/bash NOMBRE = \"Marcos\" echo \"Tu nombre es: NOMBRE\" Resultado de la ejecuci\u00f3n (no nos sale como queremos): \u00bfEs esto lo que esper\u00e1bamos? Efectivamente, el echo est\u00e1 funcionando como debe y el terminal nos muestra lo que le indicamos. Pero, \u00bfcomo podemos hacer que el echo nos interprete la variable NOMBRE e indique, por tanto, lo que hemos almacenado en la variable? Bien, para hacer que la palabra \"NOMBRE\" se interprete como una variable , solo tenemos que ponerle delante el caracter de DOLAR ($) : variables2.sh # Ejercicio: crear una variable \"NOMBRE\" que almacene el nombre de una persona. Despu\u00e9s, mostrar por pantalla \"Tu nombre es ________.\" #!/bin/bash NOMBRE = \"Marcos\" echo \"Tu nombre es: $NOMBRE \" # (1)! El $ hace que en lugar de mostrar la palabra NOMBRE esta se interprete como una variable (y se muestre, por tanto, su contenido). Resultado de la ejecuci\u00f3n: Ahora s\u00ed funciona correctamente. El valor que le hemos asignado a la variable es \"Marcos\", pero si lo cambiamos con otro la frase tambi\u00e9n cambiar\u00e1. Probemos con otro ejercicio: variables3.sh # Ejercicio: crear una variable \"NOMBRE\" que almacene el nombre de una persona. Despu\u00e9s, mostrar por pantalla \"Tu nombre es ________.\" Despu\u00e9s, haz que el programa espere dos segundos y muestre: \"Te has cambiado el nombre y ahora es \"Mark\". #!/bin/bash NOMBRE = \"Marcos\" echo \"Tu nombre es: $NOMBRE \" sleep 2 NOMBRE = \"Mark\" echo \"Ahora tu nombre es: $NOMBRE \" Resultado: Para saber m\u00e1s: adem\u00e1s de \"VARIABLE\" existe tambi\u00e9n la definici\u00f3n de \"CONSTANTE\". Una constante es lo mismo que una variable, solo que esta no puede volver a cambiarse a lo largo del programa. Par\u00e1metros Ya vimos que para acceder al contenido de una variable usamos el caracter $ (p. ej: $nombre). Al ejecutar un script podemos pasarle a estos una serie de par\u00e1metros. Veamos ejemplos con comandos: ls -l: ls es el comando y -l es el primer par\u00e1metro. cat fichero.txt: en este caso, cat es el comando de nuevo y fichero.txt ser\u00eda el primer par\u00e1metro (por el cu\u00e1l el comando CAT sabe que fichero debe mostrar). tar -cvf personas.tar paula.txt diego.txt adrian.txt: en este caso, -cvf es el primer par\u00e1metro, personas.tar es el segundo par\u00e1metro, paula.txt el tercero, etc. Bien, nosotros podemos crear tambi\u00e9n scripts que reciban par\u00e1metros. Para mostrarlo vamos a utilizar el \u00faltimo script mostrado y hacer que ambos nombres (el primero y el segundo) sean elegidos por el usuario que lo ejecuta (y as\u00ed no tengan por que ser siempre los mismos): parametros1 #!/bin/bash # Asignamos el par\u00e1metro 1 a la variable NOMBRE. NOMBRE = $1 echo \"Tu nombre es: $NOMBRE .\" sleep 2 # Ahora, asignamos el par\u00e1metro 2 a la variable NOMBRE. NOMBRE = $2 echo \"Han pasado dos segundos y ahora tu nombre es: $NOMBRE .\" Resultado de dos ejecuciones de ejemplo: ./parametros1 Ellen Elliot Tu nombre es: Ellen. Han pasado tiempo y ahora mi nombre es: Elliot. ./parametros1 \"Ellen Page\" \"Elliot Page\" Tu nombre es: Ellen Page. Han pasado tiempo y ahora mi nombre es: Elliot Page. Como vemos, existen ya variables predefinidas en la ejecuci\u00f3n de un script y a las que podemos acceder con el $ . En este caso, $1, $2, $3 (en resumen $n\u00famero) son variables que representan a cada par\u00e1metro del script. Podr\u00edamos tambi\u00e9n haber dejado el script directamente as\u00ed: parametros2 #!/bin/bash echo \"Tu nombre es: $1 .\" sleep 2 echo \"Han pasado dos segundos y ahora tu nombre es: $2 .\" El resultado ser\u00eda exactamente el mismo: La ventaja del primer script es que queda m\u00e1s claro que es lo que se est\u00e1 mostrando (nombre es una variable muy indicativa de que es lo que se va a mostrar). La ventaja del segundo script , por su parte, es que queda sencillo y con pocas l\u00edneas . Adem\u00e1s de $n\u00famero, existen muchas otras maneras de acceder a informaci\u00f3n sobre los par\u00e1metros: Variable Descripci\u00f3n $n\u00famero Representa el par\u00e1metro pasado en ese n\u00famero ($1, $2, $3...). $* y $@ Todos los par\u00e1metros que se hayan pasado al script. $# N\u00famero de par\u00e1metros (en el ejemplo anterior $# devolver\u00eda un 2, porque se han pasado dos nombres). $0 El nombre del script $? Muestra el resultado del \u00faltimo comando ejecutado (p. ej: si no ha dado error devolver\u00e1 un 0, que es \u00e9xito). parametros3 #!/bin/bash echo \"O n\u00famero de par\u00e1metros pasado ao script \u00e9: $# .\" echo \"Nome do script: $0 .\" echo \"O par\u00e1metro 1 \u00e9: $1 .\" echo \"O par\u00e1metro 2 \u00e9: $2 .\" echo \"O par\u00e1metro 3 \u00e9: $3 .\" echo \"O par\u00e1metro 4 \u00e9: $4 .\" echo \"O par\u00e1metro 5 \u00e9: $5 .\" echo \"Os par\u00e1metros son os seguintes: $* .\" echo \"Os par\u00e1metros son os seguintes: $@ .\" echo \"O resultado do comando anterior \u00e9: $? .\" Resultado de la ejecuci\u00f3n (lo pruebo con 3 par\u00e1metros): ./parametros3 hola boas tardes O n\u00famero de par\u00e1metros pasado ao script \u00e9: 3. Nome do script: ./parametros3. O par\u00e1metro 1 \u00e9: hola. O par\u00e1metro 2 \u00e9: boas. O par\u00e1metro 3 \u00e9: tardes. O par\u00e1metro 4 \u00e9:. O par\u00e1metro 5 \u00e9:. Os par\u00e1metros son os seguintes: hola boas tardes. Os par\u00e1metros son os seguintes: hola boas tardes. O resultado do comando anterior \u00e9: 0. Ejercicio propuesto: parametros4-tunombre-tuapellido #!/bin/bash # 1. Escribir un saludo por pantalla: \"Hola mundo.\" # 2. Escribir un mensaje donde indiques el nombre del programa (siempre debe ser correcto, aunque el nombre del script cambie). # 3. Escribir un mensaje que indique el n\u00famero de par\u00e1metros pasados al script. # 4. Mostrar todos los par\u00e1metros pasados al script. # 5. Escribir un mensaje que ponga: # El par\u00e1metro 1 es: _____, el 2 es: ______ y el 3 es _______. # 6. Prueba un mensaje con el par\u00e1metro $_. Sentencias condicionales (if/else) En programaci\u00f3n existen las llamadas sentencias condicionales, basicamente puedes decir lo siguiente: Pseudoc\u00f3digo de un condicional if/else Si condici\u00f3n haz algo Sino... haz otra cosa Traducido al ingl\u00e9s el si condicional se denomina if , y el sino else . Una sentencia if real quedar\u00eda tal que as\u00ed: Sintaxis de if: Sintaxis real de un condicional if if [ condicion ] then # Hacemos cosas fi fi es if al rev\u00e9s, es la manera en que terminamos la condici\u00f3n . Veamos ahora con un if/else (si se cumple la condici\u00f3n hacemos algo, en caso contrario hacemos otra cosa): Sintaxis real de un condicional if / else if [ condicion ] then # Hacemos algo else # Hacemos otra cosa fi Ejercicio de ejemplo: menores y mayores de edad Script que, pasando como par\u00e1metro una edad, nos diga si es menor de edad o mayor de edad (mayor o igual que 18). Utiliza solo ifs (sin else). condicionales1 - Intenta hacerlo! #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor o igual a 18 a\u00f1os, escribe: \"Es mayor de edad.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" # SINTAXIS PARA RESOLVER EL EJERCICIO: # Si parametro1 es mayor que 17 # if $1 greater than 17 # if [ $1 -gt 17 ] # then/entonces # echo ... # fi # NOTA: necesitar\u00e1s dos ifs (uno para mayor y otro para menor). Intenta resolverlo antes de mirar la soluci\u00f3n (que se muestra aqu\u00ed abajo!): condicionales1 - Soluci\u00f3n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor o igual a 18 a\u00f1os, escribe: \"Es mayor de edad.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" # SINTAXIS PARA RESOLVER EL EJERCICIO: # Si parametro1 es mayor que 17 # if $1 greater than 17 # if [ $1 -gt 17 ] # then/entonces # echo ... # fi # NOTA: necesitar\u00e1s dos ifs (uno para mayor y otro para menor). if [ $1 -gt 17 ] then echo \"E maior de idade.\" fi if [ $1 -lt 18 ] then echo \"E menor de idade.\" fi Resultado de la ejecuci\u00f3n: Ejemplo de ejecuci\u00f3n de condicionales1 ./condicionales1 18 Es mayor de edad. ./condicionales1 17 Es menor de edad. Vamos a ver ahora algunas de las condiciones que se pueden utilizar en un condicional: -lt \u2192 less than (menor que) -gt \u2192 greater than (mayor que) -le \u2192 less equals than (menor o igual que) -ge \u2192 greater equals than (mayor ou igual que) -ne \u2192 not equal (distinto de) En el ejercicio anterior podr\u00edamos haber utilizado mayor o igual que 18 ($1 -ge 18) en lugar de mayor que 17 ($1 -gt 17). Existen muchas soluciones diferentes para cada ejercicio. Aunque este m\u00e9todo funciona, es m\u00e1s correcto hacerlo con un si / sino (if/else). Es decir, en lugar de usar dos ifs utilizamos un if y debajo un else: condicionales2 1 2 3 4 5 6 7 8 #!/bin/bash if [ $1 -ge 18 ] then echo \"Es mayor de edad.\" else echo \"Es menor de edad.\" fi El resultado es el mismo que en el anterior script. Nota Un else no puede ir sin un if y un else nunca lleva condici\u00f3n. El else se ejecuta si no se cumple la condici\u00f3n del if. Sentencias condicionales (if/else) con m\u00e1s de una condici\u00f3n Si te fijas bien, ver\u00e1s que en el else (en el sino...) no podemos poner ninguna condici\u00f3n. En ocasiones no nos es suficiente con poner una \u00fanica condici\u00f3n en el if, sino que necesitamos comprobar m\u00e1s. Para esto podemos usar else if (elif) . Ejercicio de ejemplo: menores de edad, mayores de edad y jubilados Ahora, al ejercicio anterior, le vamos a a\u00f1adir una condici\u00f3n m\u00e1s (vamos a comprobar si la edad pasada como par\u00e1metro corresponde a una persona jubilada). Existen varias maneras de hacer este ejercicio: Resoluci\u00f3n con if/elses dentro de otros if/elses Con esta soluci\u00f3n vamos a hacer que si se comprueba que la edad es igual o superior a 18 a\u00f1os se haga otro if para comprobar si est\u00e1 jubilado o no (pueden darse ambos casos): condicionales3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor de 67 a\u00f1os, escribe: \"Est\u00e1 jubilado.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" ## - Si la edad es superior a 17 a\u00f1os pero inferior a 67, escribe: \"Es mayor de edad.\" if [ $1 -ge 18 ] then if [ $1 -gt 67 ] # (1)! then echo \"Est\u00e1 jubilado.\" else echo \"Es mayor de 18.\" fi # En caso de que no sea mayor de 18 es que es menor de edad. else echo \"Es menor de edad.\" fi Si el c\u00f3digo pasa por aqu\u00ed signfiica que el par\u00e1metro 1 es igual o mayor que 18 a\u00f1os. Ahora, ya sabiendo que superamos los 18, tenemos que comprobar si llegamos o no a la jubilaci\u00f3n. Para eso hace falta otro if/else que compruebe si tambi\u00e9n superamos los 66 a\u00f1os. \u00bfSomos mayores de 66? \u2192 IF o \u00bfNo lo somos? \u2192 ELSE Resoluci\u00f3n haciendo varias comprobaciones en el mismo if (&&) En el mismo condicional se pueden comprobar tantas cosas como se deseen uni\u00e9ndolas con AND (&&) o con OR (||): - AND (&&): verdadero si ambas condiciones son verdaderas. - OR (||): es verdadero si una de las dos condiciones es verdadera. condicionales4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor de 67 a\u00f1os, escribe: \"Est\u00e1 jubilado.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" ## - Si la edad es superior a 17 a\u00f1os pero inferior a 67, escribe: \"Es mayor de edad.\" if [ $1 -ge 18 ] && [ $1 -lt 67 ] # (1)! then echo \"Es mayor de edad.\" elif [ $1 -ge 67 ] # (2)! then echo \"Est\u00e1 jubilado.\" else echo \"Es menor de edad.\" fi Aqu\u00ed se comprueban dos condiciones: - \u00bfEs mayor o igual que 18? - \u00bfEs menor que 67? Ambas se deben cumplir para continuar por el then. Si el c\u00f3digo va por aqu\u00ed es que una de las dos condiciones anteriores no se cumpli\u00f3 (por tanto sabemos que o bien es menor de 18 o bien es mayor de 67 ). Con el elif y el else sabremos cu\u00e1l es Aqu\u00ed hemos a\u00f1adido una nueva posibilidad. En el if hemos unido dos condiciones: El par\u00e1metro 1 ($1) es mayor o igual que 18. El par\u00e1metro 1 ($1) es menor que 67 a\u00f1os. Hemos unido las dos condiciones con && (AND, y). Esto quiere decir que solamente si se cumplen ambas condiciones entrar\u00eda ah\u00ed . Por tanto, si se cumplen ambas condiciones mostrar\u00e1 el mensaje de que es mayor de edad. En caso de que solo necesitamos que se cumplan una de las dos usar\u00edamos || en lugar de &&. Resoluci\u00f3n m\u00e1s sencilla: if/elif/else Hasta ahora hemos puesto condiciones una sola vez (en el if). Podemos poner tantas condiciones como queramos con else if (elif) (significa: sino si... o en caso contrario...). Ejercicio: ejecuta el siguiente c\u00f3digo y si no funciona arr\u00e9glalo : condicionales5 - Encuentra el error! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor de 67 a\u00f1os, escribe: \"Est\u00e1 jubilado.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" ## - Si la edad es superior a 17 a\u00f1os pero inferior a 67, escribe: \"Es mayor de edad.\" if [ $1 -ge 18 ] then echo \"Es mayor de edad.\" elif [ $1 -ge 67 ] then echo \"Est\u00e1 jubilado.\" else echo \"Es menor de edad.\" fi Intenta encontrar el error! es algo muy simple una vez te des cuenta :-). Bucles Bucle while (mientras) La palabra while significa en espa\u00f1ol mientras . El bucle while o \"mientras\" hace que la condici\u00f3n que se le pase se ejecute repetidamente hasta que la condici\u00f3n deje de cumplirse. La sintaxis es similar a la del if: while [ condici\u00f3n ] do # Aqu\u00ed escribimos todo lo que queramos hacer en caso de que la condici\u00f3n se cumpla done Este bucle while funcionar\u00e1 igual que el if, salvo por el hecho de que repetir\u00e1 sin parar la ejecuci\u00f3n (se repetir\u00e1 una y otra vez). Vamos a ver la diferencia entre usar un IF y un WHILE con un ejemplo: C\u00f3digo (con if) Ejecuci\u00f3n if C\u00f3digo (con while) Ejecuci\u00f3n while if-vs-while #!/bin/bash # Ejercicio: indica si el n\u00famero es positivo, no pongas nada en caso de ser negativo echo -n \"Escribe un n\u00famero: \" read numero if [ $numero -gt 0 ] then echo \"El n\u00famero $numero es positivo.\" fi ./if-vs-while Escribe un n\u00famero: 2 El n\u00famero 2 es positivo. #!/bin/bash # Ejercicio que muestra los numeros positivos. echo -n \"Escribe un n\u00famero: \" read numero while [ $numero -gt 0 ] do echo \"El n\u00famero $numero es positivo.\" done /if-vs-while2 Escribe un n\u00famero: 2 El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. ... ... Ahora veamos el c\u00f3digo con while : Si la condici\u00f3n no se cumple (si le damos, por ejemplo, un -5) funcionar\u00eda igual que en el if (no pasar\u00eda nada). Si la condici\u00f3n se cumple (y mientras se siga cumpliendo) lo que hay dentro seguir\u00e1 ejecut\u00e1ndose hasta el infinito. En el caso de este script hay que parar el programa con la combinaci\u00f3n Ctrl + C . Ejercicios con bucle while Contar de 1 a 5 Crea un script que cuente los n\u00fameros del 1 al 5 (usa para ello un bucle while ). Si quieres sumar n\u00fameros puedes usar el comando expr : expr 4 + 5 A continuaci\u00f3n se muestra un posible resultado. contar-hasta-5 1 2 3 4 5 6 7 8 #!/bin/bash contador = 0 while [ $contador -lt 5 ] do echo \" $contador \" contador = $( expr $contador + 1 ) done Si lo ejecutas, ver\u00e1s que no cuenta exactamente del 1 al 5. Arr\u00e9glalo para que funcione como debe. Mostrar los n\u00fameros entre dos n\u00fameros dados Crea un script que, pasados dos par\u00e1metros, muestre os n\u00fameros desde el primero al \u00faltimo (ambos inclu\u00eddos). Por ejemplo: si ejecutas el script como ./entre-numeros 20 23 la salida deber\u00eda ser 20 21 22 23 . Bucle for (para) La sintaxis del bucle for es similar a las anteriores: Sintaxis del bucle for (para) for VARIABLE in 1 2 3 4 5 do # Hago cosas done En este bucle, la VARIABLE tomar\u00eda primero el valor 1, luego el 2, luego el 3, luego el 4 y finalmente el 5. Se ejecutar\u00eda 5 veces y en $VARIABLE cada vez uno de esos valores. Veamos un ejemplo como el anterior del while (que muestre n\u00fameros del 1 al 5). Mostrar n\u00fameros del 1 al 5 #!/bin/bash for contador in 1 2 3 4 5 do echo \"El contador vale: $contador .\" done For con rangos El bucle for se puede usar con rangos. La sintaxis es la siguiente: Sintaxis de rangos en el bucle for for i in { n1..n2 } do echo $i # (1)! done En este caso le estamos llamando \"i\" al contador. \"i\" recorrer\u00e1 desde n1 hasta n2 todos los n\u00fameros. Veamos con un ejemplo real que recorra los n\u00fameros del 1 al 5: Contar 5 con rangos Ejecuci\u00f3n Recorrer n\u00fameros del 1 al 5 usando rangos #!/bin/bash for cont in { 1 ..10 } do echo \"El contador vale: $cont .\" done ./contar-hasta-5-rangos El contador vale: 1. El contador vale: 2. El contador vale: 3. El contador vale: 4. El contador vale: 5. Si deseamos trabajar con rangos como ahora, pero queremos hacer que el contador vaya de 2 en 2, de 5 en 5... podemos hacerlo con la sintaxis siguiente: Sintaxis de rangos en el bucle for for i in { NUMERO_INICIAL..NUMERO_FINAL..NUMERO_DE_SALTOS } do echo \" $i \" # (1)! done Se mostrar\u00e1 el valor de la variable i. Este valor empezar\u00e1 en NUMERO_INICIAL e ir\u00e1 saltando NUMERO_DE_SALTOS hata llegar a NUMERO_FINAL. Por ejemplo, el siguiente c\u00f3digo ir\u00e1 hacia atr\u00e1s desde 20 hasta -5 (e ir\u00e1 de 5 en 5): Rangos con salto Ejecuci\u00f3n Recorrer n\u00fameros del 1 al 5 usando rangos #!/bin/bash for cont in { 20 ..-5..5 } do echo \"El contador vale: $cont .\" done ./contar-hasta-5-rangos-salto El contador vale: 20. El contador vale: 15. El contador vale: 10. El contador vale: 5. El contador vale: 0. El contador vale: -5. Ejercicios Realiza los siguientes ejercicios: Usando un bucle for con rangos , cuenta desde el n\u00famero 8 hasta el 1. Usando un bucle for sin rangos , cuenta desde el n\u00famero 8 hasta el 1. Usando un bucle while cuenta desde el n\u00famero 8 hasta el 0 (retrocediendo de 2 en 2). Crea un script que cuente los n\u00fameros impares empezando en el 133 hasta 0 (bucle for). Los n\u00fameros deben estar en la misma l\u00ednea separados por espacios. Crea un script que haga un head de todos los ficheros pasados como par\u00e1metro, no importa cu\u00e1ntos sean ( recuerda que hay una variable que te devuelve todos los par\u00e1metros, as\u00ed podr\u00e1s usarlos en un bucle for sencillo ). Debe indicarse claramente (al hacer el head de cada fichero) cu\u00e1l se est\u00e1 mostrando (m\u00e1s abajo tienes un ejemplo de ejecuci\u00f3n del ejercicio). Crea un script que recorra los par\u00e1metros que se le pasen e indique si el n\u00famero es par o impar. Para comprobar si el n\u00famero es par o impar solo hay que ver el resto de la divisi\u00f3n, para ello se usa el operador \"%\". Por ejemplo: para 10 % 2 el resultado ser\u00e1 0, para 11 % 2 el resultado (el resto) ser\u00e1 1. Crea un script con un men\u00fa que pregunte al usuario las siguientes opciones: (1) Ver estado de los discos. (2) Ver uso de RAM. (3) Mostrar las carpetas del directorio /home. En caso de que el usuario ponga un n\u00famero distinto de 1, 2 o 3, debe mostrarse un error. Haz una copia del script anterior y a\u00f1ade una opci\u00f3n 4 que sea \"Salir\". El programa se repetir\u00e1 continuamente mostrando el men\u00fa y pidiendo opciones hasta que el usuario pulse esa opci\u00f3n. Tambi\u00e9n, si se elige una opci\u00f3n que no existe (por ejemplo: 7) debe mostrarse un mensaje de error. Ejemplos de ejecuci\u00f3n de los ejercicios A continuaci\u00f3n se muestran ejemplos de salidas de los ejercicios anteriores al ejecutarlos: Resultado ejercicio 4 Resultado ejercicio 5 Resultado ejercicio 7 nceleiro@mnceleiro-gram:~$ ./contar-impares-for 133 131 129 127 125 123 121 119 117 115 113 111 109 107 105 103 101 99 97 95 93 91 89 87 85 83 81 79 77 75 73 71 69 67 65 63 61 59 57 55 53 51 49 47 45 43 41 39 37 35 33 31 29 27 25 23 21 19 17 15 13 11 9 7 5 3 1 mnceleiro@mnceleiro-gram:~$ ./head-ficheros -------------- FICHERO: rosalia.txt --------------------- Adios rios, adios fontes Adios regatos pequenos Adios vista dos meus ollos Non sei cando nos veremos ------------- FICHERO: estrofa.txt ------------------------ Adios, adios, que me vou Herbi\u00f1as do camposanto Donde meu pai s' enterrou Herbi\u00f1as que biquey tanto Terri\u00f1a que nos criou --------------------------------------------------------- ./par-impar 4 18 22 23 El n\u00famero 4 es PAR. El n\u00famero 18 es PAR. El n\u00famero 22 es PAR. El n\u00famero 23 es IMPAR. Referencias How-to: Shell parameters. ss64. Obtenido de: https://ss64.com/bash/syntax-parameters.html Vivek Gite. Bash For Loop Examples. cyberciti. Obtenido de: https://www.cyberciti.biz/faq/bash-for-loop/#C_style_for_loop Shell scripting tutorial. shellscript.sh. Obtenido de: https://www.shellscript.sh","title":"Programaci\u00f3n de scripts"},{"location":"gnu-linux/scripting-linux/#shell-scripting","text":"Existen m\u00faltiples shells (podemos ver cu\u00e1l estamos usando mostrando con echo la variable de entorno $SHELL).","title":"Shell scripting"},{"location":"gnu-linux/scripting-linux/#mi-primer-script","text":"","title":"Mi primer script"},{"location":"gnu-linux/scripting-linux/#contenido-del-script","text":"Para empezar, nuestro primer script mostrar\u00e1 en pantalla solamente la l\u00ednea: Hola mundo Para ello, editamos el script con nuestro editor preferido (p. ej: vim o nano) y a\u00f1adimos lo siguiente: #!/bin/bash echo \"Hola mundo.\"","title":"Contenido del script"},{"location":"gnu-linux/scripting-linux/#permisos-de-ejecucion","text":"Para crear un script en BASH creamos un fichero con el nombre que queramos y le damos permisos de ejecuci\u00f3n (u+x): echo \"\" > helloworld.sh Esto crea un fichero helloworld.sh al que deber\u00edamos darle tambi\u00e9n permisos de ejecuci\u00f3n. Para dar permisos usamos el comando chmod y podemos hacerlo de dos maneras distintas: chmod u+x helloworld.sh o chmod 764 helloworld.sh Ejemplo de realizaci\u00f3n de la tarea de creaci\u00f3n de script y permisos de ejecuci\u00f3n para el usuario:","title":"Permisos de ejecuci\u00f3n"},{"location":"gnu-linux/scripting-linux/#ejecucion","text":"Para ejecutar el script podemos usar cualquiera de los siguientes comandos: ./helloworld.sh bash helloworld.sh El resultado deber\u00eda ser el siguiente:","title":"Ejecuci\u00f3n"},{"location":"gnu-linux/scripting-linux/#variables","text":"Una variable es un sitio en memoria para guardar informaci\u00f3n. Un ejemplo de creaci\u00f3n de una variable y asignaci\u00f3n de un n\u00famero a ella ser\u00eda el siguiente: EDAD=35 Veamoslo con un script de ejemplo: variables.sh # Ejercicio: crear una variable \"NOMBRE\" que almacene el nombre de una persona. Despu\u00e9s, mostrar por pantalla \"Tu nombre es ________.\" #!/bin/bash NOMBRE = \"Marcos\" echo \"Tu nombre es: NOMBRE\" Resultado de la ejecuci\u00f3n (no nos sale como queremos): \u00bfEs esto lo que esper\u00e1bamos? Efectivamente, el echo est\u00e1 funcionando como debe y el terminal nos muestra lo que le indicamos. Pero, \u00bfcomo podemos hacer que el echo nos interprete la variable NOMBRE e indique, por tanto, lo que hemos almacenado en la variable? Bien, para hacer que la palabra \"NOMBRE\" se interprete como una variable , solo tenemos que ponerle delante el caracter de DOLAR ($) : variables2.sh # Ejercicio: crear una variable \"NOMBRE\" que almacene el nombre de una persona. Despu\u00e9s, mostrar por pantalla \"Tu nombre es ________.\" #!/bin/bash NOMBRE = \"Marcos\" echo \"Tu nombre es: $NOMBRE \" # (1)! El $ hace que en lugar de mostrar la palabra NOMBRE esta se interprete como una variable (y se muestre, por tanto, su contenido). Resultado de la ejecuci\u00f3n: Ahora s\u00ed funciona correctamente. El valor que le hemos asignado a la variable es \"Marcos\", pero si lo cambiamos con otro la frase tambi\u00e9n cambiar\u00e1. Probemos con otro ejercicio: variables3.sh # Ejercicio: crear una variable \"NOMBRE\" que almacene el nombre de una persona. Despu\u00e9s, mostrar por pantalla \"Tu nombre es ________.\" Despu\u00e9s, haz que el programa espere dos segundos y muestre: \"Te has cambiado el nombre y ahora es \"Mark\". #!/bin/bash NOMBRE = \"Marcos\" echo \"Tu nombre es: $NOMBRE \" sleep 2 NOMBRE = \"Mark\" echo \"Ahora tu nombre es: $NOMBRE \" Resultado: Para saber m\u00e1s: adem\u00e1s de \"VARIABLE\" existe tambi\u00e9n la definici\u00f3n de \"CONSTANTE\". Una constante es lo mismo que una variable, solo que esta no puede volver a cambiarse a lo largo del programa.","title":"Variables"},{"location":"gnu-linux/scripting-linux/#parametros","text":"Ya vimos que para acceder al contenido de una variable usamos el caracter $ (p. ej: $nombre). Al ejecutar un script podemos pasarle a estos una serie de par\u00e1metros. Veamos ejemplos con comandos: ls -l: ls es el comando y -l es el primer par\u00e1metro. cat fichero.txt: en este caso, cat es el comando de nuevo y fichero.txt ser\u00eda el primer par\u00e1metro (por el cu\u00e1l el comando CAT sabe que fichero debe mostrar). tar -cvf personas.tar paula.txt diego.txt adrian.txt: en este caso, -cvf es el primer par\u00e1metro, personas.tar es el segundo par\u00e1metro, paula.txt el tercero, etc. Bien, nosotros podemos crear tambi\u00e9n scripts que reciban par\u00e1metros. Para mostrarlo vamos a utilizar el \u00faltimo script mostrado y hacer que ambos nombres (el primero y el segundo) sean elegidos por el usuario que lo ejecuta (y as\u00ed no tengan por que ser siempre los mismos): parametros1 #!/bin/bash # Asignamos el par\u00e1metro 1 a la variable NOMBRE. NOMBRE = $1 echo \"Tu nombre es: $NOMBRE .\" sleep 2 # Ahora, asignamos el par\u00e1metro 2 a la variable NOMBRE. NOMBRE = $2 echo \"Han pasado dos segundos y ahora tu nombre es: $NOMBRE .\" Resultado de dos ejecuciones de ejemplo: ./parametros1 Ellen Elliot Tu nombre es: Ellen. Han pasado tiempo y ahora mi nombre es: Elliot. ./parametros1 \"Ellen Page\" \"Elliot Page\" Tu nombre es: Ellen Page. Han pasado tiempo y ahora mi nombre es: Elliot Page. Como vemos, existen ya variables predefinidas en la ejecuci\u00f3n de un script y a las que podemos acceder con el $ . En este caso, $1, $2, $3 (en resumen $n\u00famero) son variables que representan a cada par\u00e1metro del script. Podr\u00edamos tambi\u00e9n haber dejado el script directamente as\u00ed: parametros2 #!/bin/bash echo \"Tu nombre es: $1 .\" sleep 2 echo \"Han pasado dos segundos y ahora tu nombre es: $2 .\" El resultado ser\u00eda exactamente el mismo: La ventaja del primer script es que queda m\u00e1s claro que es lo que se est\u00e1 mostrando (nombre es una variable muy indicativa de que es lo que se va a mostrar). La ventaja del segundo script , por su parte, es que queda sencillo y con pocas l\u00edneas . Adem\u00e1s de $n\u00famero, existen muchas otras maneras de acceder a informaci\u00f3n sobre los par\u00e1metros: Variable Descripci\u00f3n $n\u00famero Representa el par\u00e1metro pasado en ese n\u00famero ($1, $2, $3...). $* y $@ Todos los par\u00e1metros que se hayan pasado al script. $# N\u00famero de par\u00e1metros (en el ejemplo anterior $# devolver\u00eda un 2, porque se han pasado dos nombres). $0 El nombre del script $? Muestra el resultado del \u00faltimo comando ejecutado (p. ej: si no ha dado error devolver\u00e1 un 0, que es \u00e9xito). parametros3 #!/bin/bash echo \"O n\u00famero de par\u00e1metros pasado ao script \u00e9: $# .\" echo \"Nome do script: $0 .\" echo \"O par\u00e1metro 1 \u00e9: $1 .\" echo \"O par\u00e1metro 2 \u00e9: $2 .\" echo \"O par\u00e1metro 3 \u00e9: $3 .\" echo \"O par\u00e1metro 4 \u00e9: $4 .\" echo \"O par\u00e1metro 5 \u00e9: $5 .\" echo \"Os par\u00e1metros son os seguintes: $* .\" echo \"Os par\u00e1metros son os seguintes: $@ .\" echo \"O resultado do comando anterior \u00e9: $? .\" Resultado de la ejecuci\u00f3n (lo pruebo con 3 par\u00e1metros): ./parametros3 hola boas tardes O n\u00famero de par\u00e1metros pasado ao script \u00e9: 3. Nome do script: ./parametros3. O par\u00e1metro 1 \u00e9: hola. O par\u00e1metro 2 \u00e9: boas. O par\u00e1metro 3 \u00e9: tardes. O par\u00e1metro 4 \u00e9:. O par\u00e1metro 5 \u00e9:. Os par\u00e1metros son os seguintes: hola boas tardes. Os par\u00e1metros son os seguintes: hola boas tardes. O resultado do comando anterior \u00e9: 0. Ejercicio propuesto: parametros4-tunombre-tuapellido #!/bin/bash # 1. Escribir un saludo por pantalla: \"Hola mundo.\" # 2. Escribir un mensaje donde indiques el nombre del programa (siempre debe ser correcto, aunque el nombre del script cambie). # 3. Escribir un mensaje que indique el n\u00famero de par\u00e1metros pasados al script. # 4. Mostrar todos los par\u00e1metros pasados al script. # 5. Escribir un mensaje que ponga: # El par\u00e1metro 1 es: _____, el 2 es: ______ y el 3 es _______. # 6. Prueba un mensaje con el par\u00e1metro $_.","title":"Par\u00e1metros"},{"location":"gnu-linux/scripting-linux/#sentencias-condicionales-ifelse","text":"En programaci\u00f3n existen las llamadas sentencias condicionales, basicamente puedes decir lo siguiente: Pseudoc\u00f3digo de un condicional if/else Si condici\u00f3n haz algo Sino... haz otra cosa Traducido al ingl\u00e9s el si condicional se denomina if , y el sino else . Una sentencia if real quedar\u00eda tal que as\u00ed: Sintaxis de if: Sintaxis real de un condicional if if [ condicion ] then # Hacemos cosas fi fi es if al rev\u00e9s, es la manera en que terminamos la condici\u00f3n . Veamos ahora con un if/else (si se cumple la condici\u00f3n hacemos algo, en caso contrario hacemos otra cosa): Sintaxis real de un condicional if / else if [ condicion ] then # Hacemos algo else # Hacemos otra cosa fi","title":"Sentencias condicionales (if/else)"},{"location":"gnu-linux/scripting-linux/#ejercicio-de-ejemplo-menores-y-mayores-de-edad","text":"Script que, pasando como par\u00e1metro una edad, nos diga si es menor de edad o mayor de edad (mayor o igual que 18). Utiliza solo ifs (sin else). condicionales1 - Intenta hacerlo! #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor o igual a 18 a\u00f1os, escribe: \"Es mayor de edad.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" # SINTAXIS PARA RESOLVER EL EJERCICIO: # Si parametro1 es mayor que 17 # if $1 greater than 17 # if [ $1 -gt 17 ] # then/entonces # echo ... # fi # NOTA: necesitar\u00e1s dos ifs (uno para mayor y otro para menor). Intenta resolverlo antes de mirar la soluci\u00f3n (que se muestra aqu\u00ed abajo!): condicionales1 - Soluci\u00f3n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor o igual a 18 a\u00f1os, escribe: \"Es mayor de edad.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" # SINTAXIS PARA RESOLVER EL EJERCICIO: # Si parametro1 es mayor que 17 # if $1 greater than 17 # if [ $1 -gt 17 ] # then/entonces # echo ... # fi # NOTA: necesitar\u00e1s dos ifs (uno para mayor y otro para menor). if [ $1 -gt 17 ] then echo \"E maior de idade.\" fi if [ $1 -lt 18 ] then echo \"E menor de idade.\" fi Resultado de la ejecuci\u00f3n: Ejemplo de ejecuci\u00f3n de condicionales1 ./condicionales1 18 Es mayor de edad. ./condicionales1 17 Es menor de edad. Vamos a ver ahora algunas de las condiciones que se pueden utilizar en un condicional: -lt \u2192 less than (menor que) -gt \u2192 greater than (mayor que) -le \u2192 less equals than (menor o igual que) -ge \u2192 greater equals than (mayor ou igual que) -ne \u2192 not equal (distinto de) En el ejercicio anterior podr\u00edamos haber utilizado mayor o igual que 18 ($1 -ge 18) en lugar de mayor que 17 ($1 -gt 17). Existen muchas soluciones diferentes para cada ejercicio. Aunque este m\u00e9todo funciona, es m\u00e1s correcto hacerlo con un si / sino (if/else). Es decir, en lugar de usar dos ifs utilizamos un if y debajo un else: condicionales2 1 2 3 4 5 6 7 8 #!/bin/bash if [ $1 -ge 18 ] then echo \"Es mayor de edad.\" else echo \"Es menor de edad.\" fi El resultado es el mismo que en el anterior script. Nota Un else no puede ir sin un if y un else nunca lleva condici\u00f3n. El else se ejecuta si no se cumple la condici\u00f3n del if.","title":"Ejercicio de ejemplo: menores y mayores de edad"},{"location":"gnu-linux/scripting-linux/#sentencias-condicionales-ifelse-con-mas-de-una-condicion","text":"Si te fijas bien, ver\u00e1s que en el else (en el sino...) no podemos poner ninguna condici\u00f3n. En ocasiones no nos es suficiente con poner una \u00fanica condici\u00f3n en el if, sino que necesitamos comprobar m\u00e1s. Para esto podemos usar else if (elif) .","title":"Sentencias condicionales (if/else) con m\u00e1s de una condici\u00f3n"},{"location":"gnu-linux/scripting-linux/#ejercicio-de-ejemplo-menores-de-edad-mayores-de-edad-y-jubilados","text":"Ahora, al ejercicio anterior, le vamos a a\u00f1adir una condici\u00f3n m\u00e1s (vamos a comprobar si la edad pasada como par\u00e1metro corresponde a una persona jubilada). Existen varias maneras de hacer este ejercicio:","title":"Ejercicio de ejemplo: menores de edad, mayores de edad y jubilados"},{"location":"gnu-linux/scripting-linux/#resolucion-con-ifelses-dentro-de-otros-ifelses","text":"Con esta soluci\u00f3n vamos a hacer que si se comprueba que la edad es igual o superior a 18 a\u00f1os se haga otro if para comprobar si est\u00e1 jubilado o no (pueden darse ambos casos): condicionales3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor de 67 a\u00f1os, escribe: \"Est\u00e1 jubilado.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" ## - Si la edad es superior a 17 a\u00f1os pero inferior a 67, escribe: \"Es mayor de edad.\" if [ $1 -ge 18 ] then if [ $1 -gt 67 ] # (1)! then echo \"Est\u00e1 jubilado.\" else echo \"Es mayor de 18.\" fi # En caso de que no sea mayor de 18 es que es menor de edad. else echo \"Es menor de edad.\" fi Si el c\u00f3digo pasa por aqu\u00ed signfiica que el par\u00e1metro 1 es igual o mayor que 18 a\u00f1os. Ahora, ya sabiendo que superamos los 18, tenemos que comprobar si llegamos o no a la jubilaci\u00f3n. Para eso hace falta otro if/else que compruebe si tambi\u00e9n superamos los 66 a\u00f1os. \u00bfSomos mayores de 66? \u2192 IF o \u00bfNo lo somos? \u2192 ELSE","title":"Resoluci\u00f3n con if/elses dentro de otros if/elses"},{"location":"gnu-linux/scripting-linux/#resolucion-haciendo-varias-comprobaciones-en-el-mismo-if","text":"En el mismo condicional se pueden comprobar tantas cosas como se deseen uni\u00e9ndolas con AND (&&) o con OR (||): - AND (&&): verdadero si ambas condiciones son verdaderas. - OR (||): es verdadero si una de las dos condiciones es verdadera. condicionales4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor de 67 a\u00f1os, escribe: \"Est\u00e1 jubilado.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" ## - Si la edad es superior a 17 a\u00f1os pero inferior a 67, escribe: \"Es mayor de edad.\" if [ $1 -ge 18 ] && [ $1 -lt 67 ] # (1)! then echo \"Es mayor de edad.\" elif [ $1 -ge 67 ] # (2)! then echo \"Est\u00e1 jubilado.\" else echo \"Es menor de edad.\" fi Aqu\u00ed se comprueban dos condiciones: - \u00bfEs mayor o igual que 18? - \u00bfEs menor que 67? Ambas se deben cumplir para continuar por el then. Si el c\u00f3digo va por aqu\u00ed es que una de las dos condiciones anteriores no se cumpli\u00f3 (por tanto sabemos que o bien es menor de 18 o bien es mayor de 67 ). Con el elif y el else sabremos cu\u00e1l es Aqu\u00ed hemos a\u00f1adido una nueva posibilidad. En el if hemos unido dos condiciones: El par\u00e1metro 1 ($1) es mayor o igual que 18. El par\u00e1metro 1 ($1) es menor que 67 a\u00f1os. Hemos unido las dos condiciones con && (AND, y). Esto quiere decir que solamente si se cumplen ambas condiciones entrar\u00eda ah\u00ed . Por tanto, si se cumplen ambas condiciones mostrar\u00e1 el mensaje de que es mayor de edad. En caso de que solo necesitamos que se cumplan una de las dos usar\u00edamos || en lugar de &&.","title":"Resoluci\u00f3n haciendo varias comprobaciones en el mismo if (&amp;&amp;)"},{"location":"gnu-linux/scripting-linux/#resolucion-mas-sencilla-ifelifelse","text":"Hasta ahora hemos puesto condiciones una sola vez (en el if). Podemos poner tantas condiciones como queramos con else if (elif) (significa: sino si... o en caso contrario...). Ejercicio: ejecuta el siguiente c\u00f3digo y si no funciona arr\u00e9glalo : condicionales5 - Encuentra el error! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash # Programa al que se le pasa como par\u00e1metro una edad: ## - Si es mayor de 67 a\u00f1os, escribe: \"Est\u00e1 jubilado.\" ## - Si la edad es inferior a 18 a\u00f1os, escribe: \"Es menor de edad.\" ## - Si la edad es superior a 17 a\u00f1os pero inferior a 67, escribe: \"Es mayor de edad.\" if [ $1 -ge 18 ] then echo \"Es mayor de edad.\" elif [ $1 -ge 67 ] then echo \"Est\u00e1 jubilado.\" else echo \"Es menor de edad.\" fi Intenta encontrar el error! es algo muy simple una vez te des cuenta :-).","title":"Resoluci\u00f3n m\u00e1s sencilla: if/elif/else"},{"location":"gnu-linux/scripting-linux/#bucles","text":"","title":"Bucles"},{"location":"gnu-linux/scripting-linux/#bucle-while-mientras","text":"La palabra while significa en espa\u00f1ol mientras . El bucle while o \"mientras\" hace que la condici\u00f3n que se le pase se ejecute repetidamente hasta que la condici\u00f3n deje de cumplirse. La sintaxis es similar a la del if: while [ condici\u00f3n ] do # Aqu\u00ed escribimos todo lo que queramos hacer en caso de que la condici\u00f3n se cumpla done Este bucle while funcionar\u00e1 igual que el if, salvo por el hecho de que repetir\u00e1 sin parar la ejecuci\u00f3n (se repetir\u00e1 una y otra vez). Vamos a ver la diferencia entre usar un IF y un WHILE con un ejemplo: C\u00f3digo (con if) Ejecuci\u00f3n if C\u00f3digo (con while) Ejecuci\u00f3n while if-vs-while #!/bin/bash # Ejercicio: indica si el n\u00famero es positivo, no pongas nada en caso de ser negativo echo -n \"Escribe un n\u00famero: \" read numero if [ $numero -gt 0 ] then echo \"El n\u00famero $numero es positivo.\" fi ./if-vs-while Escribe un n\u00famero: 2 El n\u00famero 2 es positivo. #!/bin/bash # Ejercicio que muestra los numeros positivos. echo -n \"Escribe un n\u00famero: \" read numero while [ $numero -gt 0 ] do echo \"El n\u00famero $numero es positivo.\" done /if-vs-while2 Escribe un n\u00famero: 2 El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. El n\u00famero 2 es positivo. ... ... Ahora veamos el c\u00f3digo con while : Si la condici\u00f3n no se cumple (si le damos, por ejemplo, un -5) funcionar\u00eda igual que en el if (no pasar\u00eda nada). Si la condici\u00f3n se cumple (y mientras se siga cumpliendo) lo que hay dentro seguir\u00e1 ejecut\u00e1ndose hasta el infinito. En el caso de este script hay que parar el programa con la combinaci\u00f3n Ctrl + C .","title":"Bucle while (mientras)"},{"location":"gnu-linux/scripting-linux/#ejercicios-con-bucle-while","text":"","title":"Ejercicios con bucle while"},{"location":"gnu-linux/scripting-linux/#contar-de-1-a-5","text":"Crea un script que cuente los n\u00fameros del 1 al 5 (usa para ello un bucle while ). Si quieres sumar n\u00fameros puedes usar el comando expr : expr 4 + 5 A continuaci\u00f3n se muestra un posible resultado. contar-hasta-5 1 2 3 4 5 6 7 8 #!/bin/bash contador = 0 while [ $contador -lt 5 ] do echo \" $contador \" contador = $( expr $contador + 1 ) done Si lo ejecutas, ver\u00e1s que no cuenta exactamente del 1 al 5. Arr\u00e9glalo para que funcione como debe.","title":"Contar de 1 a 5"},{"location":"gnu-linux/scripting-linux/#mostrar-los-numeros-entre-dos-numeros-dados","text":"Crea un script que, pasados dos par\u00e1metros, muestre os n\u00fameros desde el primero al \u00faltimo (ambos inclu\u00eddos). Por ejemplo: si ejecutas el script como ./entre-numeros 20 23 la salida deber\u00eda ser 20 21 22 23 .","title":"Mostrar los n\u00fameros entre dos n\u00fameros dados"},{"location":"gnu-linux/scripting-linux/#bucle-for-para","text":"La sintaxis del bucle for es similar a las anteriores: Sintaxis del bucle for (para) for VARIABLE in 1 2 3 4 5 do # Hago cosas done En este bucle, la VARIABLE tomar\u00eda primero el valor 1, luego el 2, luego el 3, luego el 4 y finalmente el 5. Se ejecutar\u00eda 5 veces y en $VARIABLE cada vez uno de esos valores. Veamos un ejemplo como el anterior del while (que muestre n\u00fameros del 1 al 5). Mostrar n\u00fameros del 1 al 5 #!/bin/bash for contador in 1 2 3 4 5 do echo \"El contador vale: $contador .\" done","title":"Bucle for (para)"},{"location":"gnu-linux/scripting-linux/#for-con-rangos","text":"El bucle for se puede usar con rangos. La sintaxis es la siguiente: Sintaxis de rangos en el bucle for for i in { n1..n2 } do echo $i # (1)! done En este caso le estamos llamando \"i\" al contador. \"i\" recorrer\u00e1 desde n1 hasta n2 todos los n\u00fameros. Veamos con un ejemplo real que recorra los n\u00fameros del 1 al 5: Contar 5 con rangos Ejecuci\u00f3n Recorrer n\u00fameros del 1 al 5 usando rangos #!/bin/bash for cont in { 1 ..10 } do echo \"El contador vale: $cont .\" done ./contar-hasta-5-rangos El contador vale: 1. El contador vale: 2. El contador vale: 3. El contador vale: 4. El contador vale: 5. Si deseamos trabajar con rangos como ahora, pero queremos hacer que el contador vaya de 2 en 2, de 5 en 5... podemos hacerlo con la sintaxis siguiente: Sintaxis de rangos en el bucle for for i in { NUMERO_INICIAL..NUMERO_FINAL..NUMERO_DE_SALTOS } do echo \" $i \" # (1)! done Se mostrar\u00e1 el valor de la variable i. Este valor empezar\u00e1 en NUMERO_INICIAL e ir\u00e1 saltando NUMERO_DE_SALTOS hata llegar a NUMERO_FINAL. Por ejemplo, el siguiente c\u00f3digo ir\u00e1 hacia atr\u00e1s desde 20 hasta -5 (e ir\u00e1 de 5 en 5): Rangos con salto Ejecuci\u00f3n Recorrer n\u00fameros del 1 al 5 usando rangos #!/bin/bash for cont in { 20 ..-5..5 } do echo \"El contador vale: $cont .\" done ./contar-hasta-5-rangos-salto El contador vale: 20. El contador vale: 15. El contador vale: 10. El contador vale: 5. El contador vale: 0. El contador vale: -5.","title":"For con rangos"},{"location":"gnu-linux/scripting-linux/#ejercicios","text":"Realiza los siguientes ejercicios: Usando un bucle for con rangos , cuenta desde el n\u00famero 8 hasta el 1. Usando un bucle for sin rangos , cuenta desde el n\u00famero 8 hasta el 1. Usando un bucle while cuenta desde el n\u00famero 8 hasta el 0 (retrocediendo de 2 en 2). Crea un script que cuente los n\u00fameros impares empezando en el 133 hasta 0 (bucle for). Los n\u00fameros deben estar en la misma l\u00ednea separados por espacios. Crea un script que haga un head de todos los ficheros pasados como par\u00e1metro, no importa cu\u00e1ntos sean ( recuerda que hay una variable que te devuelve todos los par\u00e1metros, as\u00ed podr\u00e1s usarlos en un bucle for sencillo ). Debe indicarse claramente (al hacer el head de cada fichero) cu\u00e1l se est\u00e1 mostrando (m\u00e1s abajo tienes un ejemplo de ejecuci\u00f3n del ejercicio). Crea un script que recorra los par\u00e1metros que se le pasen e indique si el n\u00famero es par o impar. Para comprobar si el n\u00famero es par o impar solo hay que ver el resto de la divisi\u00f3n, para ello se usa el operador \"%\". Por ejemplo: para 10 % 2 el resultado ser\u00e1 0, para 11 % 2 el resultado (el resto) ser\u00e1 1. Crea un script con un men\u00fa que pregunte al usuario las siguientes opciones: (1) Ver estado de los discos. (2) Ver uso de RAM. (3) Mostrar las carpetas del directorio /home. En caso de que el usuario ponga un n\u00famero distinto de 1, 2 o 3, debe mostrarse un error. Haz una copia del script anterior y a\u00f1ade una opci\u00f3n 4 que sea \"Salir\". El programa se repetir\u00e1 continuamente mostrando el men\u00fa y pidiendo opciones hasta que el usuario pulse esa opci\u00f3n. Tambi\u00e9n, si se elige una opci\u00f3n que no existe (por ejemplo: 7) debe mostrarse un mensaje de error.","title":"Ejercicios"},{"location":"gnu-linux/scripting-linux/#ejemplos-de-ejecucion-de-los-ejercicios","text":"A continuaci\u00f3n se muestran ejemplos de salidas de los ejercicios anteriores al ejecutarlos: Resultado ejercicio 4 Resultado ejercicio 5 Resultado ejercicio 7 nceleiro@mnceleiro-gram:~$ ./contar-impares-for 133 131 129 127 125 123 121 119 117 115 113 111 109 107 105 103 101 99 97 95 93 91 89 87 85 83 81 79 77 75 73 71 69 67 65 63 61 59 57 55 53 51 49 47 45 43 41 39 37 35 33 31 29 27 25 23 21 19 17 15 13 11 9 7 5 3 1 mnceleiro@mnceleiro-gram:~$ ./head-ficheros -------------- FICHERO: rosalia.txt --------------------- Adios rios, adios fontes Adios regatos pequenos Adios vista dos meus ollos Non sei cando nos veremos ------------- FICHERO: estrofa.txt ------------------------ Adios, adios, que me vou Herbi\u00f1as do camposanto Donde meu pai s' enterrou Herbi\u00f1as que biquey tanto Terri\u00f1a que nos criou --------------------------------------------------------- ./par-impar 4 18 22 23 El n\u00famero 4 es PAR. El n\u00famero 18 es PAR. El n\u00famero 22 es PAR. El n\u00famero 23 es IMPAR.","title":"Ejemplos de ejecuci\u00f3n de los ejercicios"},{"location":"gnu-linux/scripting-linux/#referencias","text":"How-to: Shell parameters. ss64. Obtenido de: https://ss64.com/bash/syntax-parameters.html Vivek Gite. Bash For Loop Examples. cyberciti. Obtenido de: https://www.cyberciti.biz/faq/bash-for-loop/#C_style_for_loop Shell scripting tutorial. shellscript.sh. Obtenido de: https://www.shellscript.sh","title":"Referencias"},{"location":"gnu-linux/users-groups-local/","text":"Informaci\u00f3n sobre usuarios y grupos La informaci\u00f3n de los usuarios y grupos locales que hay en el sistema, en GNU/Linux, la informaci\u00f3n sobre gesti\u00f3n de usuarios y grupos se almacena en los siguientes ficheros : Fichero Descripci\u00f3n /etc/passwd Fichero de usuarios. /etc/group Fichero con los grupos /etc/shadow Fichero con las contrase\u00f1as (encriptadas) /etc/skel Es el esqueleto de creaci\u00f3n de un nuevo usuario. Esto es, cuando se crea un nuevo usuario mediante el comando useradd , los ficheros que haya en /etc/skel se copiar\u00e1n en su home. /etc/default/useradd Aqu\u00ed se define donde est\u00e1 el esqueleto (/etc/skel por defecto) para crear nuevos usuarios y el SHELL que se usar\u00e1 por ellos. Comandos de gesti\u00f3n de usuarios Comando Descripci\u00f3n id id [-un] Muestra el id y nombre del usuario actual y todos los grupos en los que est\u00e1 (tanto el principal como lo secundarios). Se podr\u00eda obtener la misma informaci\u00f3n con un: cat /etc/group | grep \"usuario\" whoami Muestra solamente el usuario actual que est\u00e1 ejecutando el comando. Es equivalente a hacer un id -un . adduser Crea un usuario de forma interactiva (este no nos es \u00fatil para automatizar tareas mediante scripts). useradd Crea un usuario. La sintaxis es la siguiente: useradd -m [-d ruta_carpeta_home] [-s shell_a_utilizar] . Un ejemplo real, para el usuario \"marcos\", podr\u00eda ser el siguiente: useradd -m -d /home/marcos -s /bin/bash marcos . chmod chmod u+r \\ \u2192 A\u00f1ade permisos de lectura ( R ead) al usuario. chmod u+w \\ \u2192 A\u00f1ade permisos de escritura ( W rite) al usuario. chmod u+x \\ \u2192 A\u00f1ade permisos de ejecuci\u00f3n (e X ecution) al usuario. Adem\u00e1s, si en lugar de la u (usuario, user) usamos la g (grupo, group ) o la o (otros, others) podemos dar permisos a los usuarios pertenecientes al mismo grupo u a otros. La letra a (todos, all) ser\u00eda para dar permiso a todos los usuarios (p. ej: permiso de ejecuci\u00f3n a usuario, grupo y otros: a+x). Si en lugar de dar un permiso queremos quitarlo, solo tenemos que cambiar el + por un -. Puedes consultar m\u00e1s informaci\u00f3n sobre permisos en este art\u00edculo . A continuaci\u00f3n se muestra en un tutorial en v\u00eddeo como gestionar usuarios y grupos locales en Debian y derivados:","title":"Gesti\u00f3n de usuarios y grupos"},{"location":"gnu-linux/users-groups-local/#informacion-sobre-usuarios-y-grupos","text":"La informaci\u00f3n de los usuarios y grupos locales que hay en el sistema, en GNU/Linux, la informaci\u00f3n sobre gesti\u00f3n de usuarios y grupos se almacena en los siguientes ficheros : Fichero Descripci\u00f3n /etc/passwd Fichero de usuarios. /etc/group Fichero con los grupos /etc/shadow Fichero con las contrase\u00f1as (encriptadas) /etc/skel Es el esqueleto de creaci\u00f3n de un nuevo usuario. Esto es, cuando se crea un nuevo usuario mediante el comando useradd , los ficheros que haya en /etc/skel se copiar\u00e1n en su home. /etc/default/useradd Aqu\u00ed se define donde est\u00e1 el esqueleto (/etc/skel por defecto) para crear nuevos usuarios y el SHELL que se usar\u00e1 por ellos.","title":"Informaci\u00f3n sobre usuarios y grupos"},{"location":"gnu-linux/users-groups-local/#comandos-de-gestion-de-usuarios","text":"Comando Descripci\u00f3n id id [-un] Muestra el id y nombre del usuario actual y todos los grupos en los que est\u00e1 (tanto el principal como lo secundarios). Se podr\u00eda obtener la misma informaci\u00f3n con un: cat /etc/group | grep \"usuario\" whoami Muestra solamente el usuario actual que est\u00e1 ejecutando el comando. Es equivalente a hacer un id -un . adduser Crea un usuario de forma interactiva (este no nos es \u00fatil para automatizar tareas mediante scripts). useradd Crea un usuario. La sintaxis es la siguiente: useradd -m [-d ruta_carpeta_home] [-s shell_a_utilizar] . Un ejemplo real, para el usuario \"marcos\", podr\u00eda ser el siguiente: useradd -m -d /home/marcos -s /bin/bash marcos . chmod chmod u+r \\ \u2192 A\u00f1ade permisos de lectura ( R ead) al usuario. chmod u+w \\ \u2192 A\u00f1ade permisos de escritura ( W rite) al usuario. chmod u+x \\ \u2192 A\u00f1ade permisos de ejecuci\u00f3n (e X ecution) al usuario. Adem\u00e1s, si en lugar de la u (usuario, user) usamos la g (grupo, group ) o la o (otros, others) podemos dar permisos a los usuarios pertenecientes al mismo grupo u a otros. La letra a (todos, all) ser\u00eda para dar permiso a todos los usuarios (p. ej: permiso de ejecuci\u00f3n a usuario, grupo y otros: a+x). Si en lugar de dar un permiso queremos quitarlo, solo tenemos que cambiar el + por un -. Puedes consultar m\u00e1s informaci\u00f3n sobre permisos en este art\u00edculo . A continuaci\u00f3n se muestra en un tutorial en v\u00eddeo como gestionar usuarios y grupos locales en Debian y derivados:","title":"Comandos de gesti\u00f3n de usuarios"},{"location":"windows/powershell/","text":"Powershell es un int\u00e9rprete de comandos que trata de sustituir al terminal de comandos antiguo (CMD.exe). PowerShell tiene los siguientes elementos: - Commandlets (o cmdlets): son los comandos de Powershell y se componen de: Verbo-Nombre. Por ejemplo: - Get-Alias - Alias: permite llamar a los comandos con nombres diferentes. Algunos ejemplos de alias creados por defecto en PowerShell son: Comando PS Alias Get-ChildItem ls Set-Location cd Get-Location pwd Write-Output echo Funciones: se utilizan para","title":"Powershell"},{"location":"windows/windows-setup/","text":"Windows Server Descarga Para descargar cualquier sistema operativo de Microsoft en versi\u00f3n de prueba se puede acceder al centro de evaluaci\u00f3n de microsoft y posteriormente seleccionar el sistema operativo deseado. Versiones En WS 2019 tenemos lo siguiente, de m\u00e1s barato a m\u00e1s caro: Windows Server 2019 Essential . Destinado a peque\u00f1os negocios y con un m\u00e1ximo de 25 usuarios pueden conectarse a el y 50 dispositivos. Actualmente Microsoft recomienda no usar esta versi\u00f3n y utilizar, en su lugar, su soluci\u00f3n de servidores en la nube Microsoft 365. Windows Server 2019 Standard : bueno para entornos f\u00edsicos (que no usan m\u00e1quinas o casi no usan m\u00e1quinas virtuales). Viene solamente con dos licencias virtuales (es decir, podemos instalar WS2019 Standard con dos VMs en HyperV pero no incrementar a una tercera a no ser que la compremos). Adem\u00e1s, si usamos el servidor f\u00edsico para cualquier otra cosa que no sea esas dos m\u00e1quinas virtuales entonces consumir\u00e1 una de esas licencias. Windows Server 2019 Datacenter : viene con licencias ilimitadas para ejecutar m\u00e1quinas virtuales (esto es, puedes crear tantas VMs como quieras). Hyper-V server 2019 : servidor dedicado de m\u00e1quinas virtuales con Hyper-V. Se puede descargar de la web de Microsoft con infinitas m\u00e1quinas virtuales. Viene sin GUI y no podemos hacer otra cosa que albergar en el m\u00e1quinas virtuales. Las diferencias m\u00e1s grandes que hay entre las versiones Standard y Datacenter es el n\u00famero de licencias para virtualizaci\u00f3n. Instalaciones desatendidas Configuraciones b\u00e1sicas en WS 2019 Referencias Kevin Brown. Windows Server 2019 Administration. Udemy. Curso disponible en: https://www.udemy.com/course/windows-server-2019-administration-h/","title":"Introducci\u00f3n"},{"location":"windows/windows-setup/#windows-server","text":"","title":"Windows Server"},{"location":"windows/windows-setup/#descarga","text":"Para descargar cualquier sistema operativo de Microsoft en versi\u00f3n de prueba se puede acceder al centro de evaluaci\u00f3n de microsoft y posteriormente seleccionar el sistema operativo deseado.","title":"Descarga"},{"location":"windows/windows-setup/#versiones","text":"En WS 2019 tenemos lo siguiente, de m\u00e1s barato a m\u00e1s caro: Windows Server 2019 Essential . Destinado a peque\u00f1os negocios y con un m\u00e1ximo de 25 usuarios pueden conectarse a el y 50 dispositivos. Actualmente Microsoft recomienda no usar esta versi\u00f3n y utilizar, en su lugar, su soluci\u00f3n de servidores en la nube Microsoft 365. Windows Server 2019 Standard : bueno para entornos f\u00edsicos (que no usan m\u00e1quinas o casi no usan m\u00e1quinas virtuales). Viene solamente con dos licencias virtuales (es decir, podemos instalar WS2019 Standard con dos VMs en HyperV pero no incrementar a una tercera a no ser que la compremos). Adem\u00e1s, si usamos el servidor f\u00edsico para cualquier otra cosa que no sea esas dos m\u00e1quinas virtuales entonces consumir\u00e1 una de esas licencias. Windows Server 2019 Datacenter : viene con licencias ilimitadas para ejecutar m\u00e1quinas virtuales (esto es, puedes crear tantas VMs como quieras). Hyper-V server 2019 : servidor dedicado de m\u00e1quinas virtuales con Hyper-V. Se puede descargar de la web de Microsoft con infinitas m\u00e1quinas virtuales. Viene sin GUI y no podemos hacer otra cosa que albergar en el m\u00e1quinas virtuales. Las diferencias m\u00e1s grandes que hay entre las versiones Standard y Datacenter es el n\u00famero de licencias para virtualizaci\u00f3n.","title":"Versiones"},{"location":"windows/windows-setup/#instalaciones-desatendidas","text":"","title":"Instalaciones desatendidas"},{"location":"windows/windows-setup/#configuraciones-basicas-en-ws-2019","text":"","title":"Configuraciones b\u00e1sicas en WS 2019"},{"location":"windows/windows-setup/#referencias","text":"Kevin Brown. Windows Server 2019 Administration. Udemy. Curso disponible en: https://www.udemy.com/course/windows-server-2019-administration-h/","title":"Referencias"}]}